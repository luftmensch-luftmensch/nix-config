:PROPERTIES:
:lisp_path: ~/nix-config/home/valentino/modules/editors/emacs/config/lisp/
:END:
#+AUTHOR: Valentino Bocchetti
#+TITLE: Emacs configuration
#+DESCRIPTION: My personal config using setup.el
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: overview
* Preface
#+begin_quote
One day we won't hate one another, no young boy will march to war and I will clean up my Emacs config. But that day isn't today.

Emacs is /blursed/ due to it's global state. Since Emacs packages are just a way to pin targeted ~eval~'s, and everything can touch everything, the world is both within reach, and out of grasp. You can do much if you cut at the joints, and you may seek understanding by inspecting the editor to see what is going on underneath. As with most tools, you get back what you put into it. This repository reflects a playground of ideas concerning prose, code, aesthetics, and time management -- an ever evolving mess.
#+end_quote

#+begin_src text
  ,           ,
 /             \
((__-^^-,-^^-__))
 `-_---' `---_-'
  `--|o` 'o|--'
     \  `  /
      ): :(
      :o_o:
       "-"
#+end_src

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt
to keep my =~/config/emacs/= tidy, but still be able to keep it all in one
file. I aim to briefly explain all my configurations as I go along!

I would not recommend using this configuration /as-is/, because it
probably contains a lot you don't really need. I do, however, hope people
find some golden nuggets that they can smuggle into their own configs.
** Notes on this document
Every file is commented in a decent way, but I'm not very verbose. Sometimes I describe every single things written (in a decent way, I guess), other times, I'm awful.
Anyway, this document is not intended as a way to show my =elisp-fu= or something like that. When you read this, imagine a diary, a tale of my [mis]adventures ðŸ¤£.
** Before =gui= - =early-init.el=
Is good practice to define an =early-init.el= file: this kind of approach provides better loading for essential stuff.
- There are some tweaks taken from [[https://github.com/doomemacs/doomemacs][DOOM Emacs]], [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]], [[https://protesilaos.com/emacs/dotemacs][Protesilaos Stavrou]]... (I'll put some credits at the end of this document, along with useful resources)
- The package manager, [[https://github.com/radian-software/straight.el][straight.el]], provides reproducibility (like Nix and Guix) with recipes, allows the editing of packages and manual version control operations on repos. [[https://github.com/radian-software/straight.el#advantages-of-straightel-5][Here]] the list of advantages.
#+include: "early-init.el" src emacs-lisp :tangle no
** Mandatory settings for the "init"

Note that =init.el= is mandatory, however I'm tangling it from this =.org= file (=Emacs.org=).

I have decided to tangle this document in =init.el= because I want to keep a few things in the main directory, while populating submodules to manage all of this.

#+begin_src emacs-lisp
;;; init.el ---  Emacs configuration -*- coding: utf-8 ; lexical-binding: t -*-

;; Author: luftmensch-luftmensch

;; This file IS NOT intended to be edited!

;;; Commentary:
;;                    ____,
;;                   /.---|
;;                   `    |     ___
;;                       (=\.  /-. \
;;                        |\/\_|"|  |
;;                        |_\ |;-|  ;
;;                        | / \| |_/ \
;;                        | )/\/      \
;;                        | ( '|  \   |
;;                        |    \_ /   \
;;                        |    /  \_.--\
;;                        \    |    (|\`
;;                         |   |     \
;;                         |   |      '.
;;                         |  /         \
;;                         \  \.__.__.-._)
;;
;;
;; Well, hello there! How are you doing wanderer? Looking for some
;; lisp goodness?  You might find it here, you might not.  If you do
;; find what you are looking for here, feel free take them with you,
;; give them a new life, a new filesystem, a new home.  All I ask of
;; you is to treat them with love and care.  They have always been
;; with me, playing along with my musing, catching little typos and
;; finding little bugs.  They stuck strong to my side even when the
;; Rust borrow checker came for me.  I'm not gonna lie, there has been
;; many a times where I have doubted my skills, but they have always
;; believed in me.
;;
;; If these parenthesis could talk, they would have a lot of stories
;; to tell.  Some good, some bad, some really ugly.  But at the end of
;; the day, I'm sure they are all happy to be where they are.
;;
;; If they give you any trouble, my GitHub issues is always open
;; unlike the doors of heaven.  They probably won't, these are the
;; good ones, but God sometimes have different plans, and everyone
;; gets hit with hard times.
;;
;; For any additional documentation and for editing this file, see leaf.org
;;
;; Good luck!

;; -------------------------------------------------------------------------------- ;;
;;   This file was auto-tangled from an orgmode file. (C)  luftmensch-luftmensch    ;;
;; -------------------------------------------------------------------------------- ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Code:

;; Do not pollute `init.el` with user customizations, use instead the proper `custom.el`
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file 'noerror 'nomessage))
;; A sane default for bookmarks (synched between devices)
;; (setq bookmark-default-file "~/config/emacs/bookmarks")
(setq bookmark-default-file (locate-user-emacs-file "bookmarks")
      ;; The current config is a symlink handled by nix
      vc-follow-symlinks t)

;; Disable damn sleep!
;; Yep, it's mandatory, that's the worst keybind ever, and should be remapped
(global-unset-key (kbd "C-z"))

;; Functions to determine if we are using a Nix installation of Emacs, or not, then we set our configuration path.
(defun vb/using-nix-p ()
  "Verifies if the running Emacs executable is under the `/nix/store/' path."
  (unless (or (equal system-type 'ms-dos)
              (equal system-type 'windows-nt))
    ;; Since there is no windows implementation of nix
    (string-prefix-p "/nix/store/"
                     (file-truename
                      (executable-find
                       (car command-line-args))))))
(defvar vb/config-path
  (let ((real-path (expand-file-name
                    "config/emacs/"
                    (getenv "HOME"))))
    (if (and (vb/using-nix-p)
             (file-exists-p real-path))
        (expand-file-name real-path)
      (expand-file-name user-emacs-directory))))
#+end_src
* Core settings
** Package boostrap w/ [[https://git.sr.ht/~pkal/setup][setup.el]]
We are requiring =init-setup=, where configuration tools based on macros (e.g. =use-package=, =leaf.el=, =setup.el=) are initialized.

I'm using [[https://git.sr.ht/~pkal/setup][setup.el]] right now.
Compared to =use-package=, =setup.el= is less declarative: you have more control, I would say that it's similar to vanilla Emacs configuration, but less verbose and with easy definition of new macros.

I also install [[https://github.com/radian-software/blackout][blackout.el]] (and define a macro with =setup.el=) here, to manage modes displayed in the mode-line.

#+begin_src emacs-lisp
;; Require package management file
(require 'init-setup)
#+end_src

#+include: "lisp/init-setup.el" src emacs-lisp :tangle no
** Performance enhancement
[[https://github.com/emacsmirror/gcmh][GCMH]] allows the auto-regulation of garbage collector based on idle timers.

During normal use a high GC threshold is set; when idling GC is triggered and a low threshold is set. Right now I'm good with 16MB for high threshold.
Other tweaks in this section have been stolen from DOOM and other configurations around.
#+begin_src emacs-lisp
(require 'init-performance)
#+end_src

#+include: "lisp/init-performance.el" src emacs-lisp :tangle no
** Keyboard support
Sometimes we forget shortcuts as we type them, [[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command in a popup.

#+begin_src emacs-lisp
(require 'init-help)
#+end_src

#+include: "lisp/init-help.el" src emacs-lisp :tangle no
** Appearance
In this section are contained line-numbers settings, modeline related configuration, minor tweaks for icons (needed also for dashboard) and colors.
*** Fonts
Readability is important, another package from Protesilaos, much more!
Currently using [[https://picaq.github.io/sarasa/][Sarasa Gothic Mono]] as font, I love it, also for variable-pitch face.
#+begin_src emacs-lisp
(require 'init-fonts)
#+end_src

#+include: "lisp/init-fonts.el" src emacs-lisp :tangle normal
*** Theming
I'm currently using [[https://protesilaos.com/emacs/modus-themes][Modus Themes]], with [[https://github.com/guidoschmidt/circadian.el][Circadian]] to set light/dark version, based on time. It's possible to switch themes on sunrise and sunset. Protesilaos made a great work, and these themes are, indeed, built into Emacs (but I always get the packaged version :D)

#+begin_src emacs-lisp
(require 'init-themes)
#+end_src

#+include: "lisp/init-themes.el" src emacs-lisp :tangle no
*** Minor UI settings
Nothing special, some minor customizations
#+begin_src emacs-lisp
(require 'init-appearance)
#+end_src

#+include: "lisp/init-appearance.el" src emacs-lisp :tangle no
*** Modeline
Just modeline customization. (Special thanks to [[https://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][amitp]] & [[https://gist.github.com/fhdhsni/990cba7794b4b6918afea94af0b30d66][fhdhsni]])
#+begin_src emacs-lisp
(require 'init-modeline)
#+end_src

#+include: "lisp/init-modeline.el" src emacs-lisp :tangle no
* Interface interaction
This section contains my file and buffer related configurations. Nothing special.
** Keybindings on steroids w/ [[https://github.com/noctuid/general.el][general.el]]
#+begin_src emacs-lisp
(require 'init-keybindings)
#+end_src

#+include: "lisp/init-keybindings.el" src emacs-lisp :tangle no
** Emacs goes [[https://github.com/emacs-evil/evil][evil]]
#+begin_src emacs-lisp
(require 'init-evil)
#+end_src

#+include: "lisp/init-evil.el" src emacs-lisp :tangle no
** Editing enhancement
Tweaks present here:
- Scroll (and smooth scroll for Emacs >= 29) and horizontal scroll with mouse;
- Truncate lines hook for =prog-mode=;
- Electric-pair mode and show-paren;
- Autorevert files after changes;
- Rainbow-mode;
- Delete-selection mode to overwrite selected regions;
- Drag-stuff to...drag stuff around;
- etc.
#+begin_src emacs-lisp
(require 'init-editing)
#+end_src

#+include: "lisp/init-editing.el" src emacs-lisp :tangle no
** Windows navigation
Moving around windows can be painful, but some built-in functions save our a*s.
#+begin_src emacs-lisp
(require 'init-windows)
#+end_src

#+include: "lisp/init-windows.el" src emacs-lisp :tangle no
** Buffer management
Sometimes buffers are too much, and I think that the classic buffer-menu is meh.
With =ibuffer= I can group buffers in ~Gnus~ style, customize actions remembering ~Dired~, and so on.

#+begin_src emacs-lisp
(require 'init-buffers)
#+end_src

#+include: "lisp/init-buffers.el" src emacs-lisp :tangle no
** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things. I currently use it as my primary file manager.

There's also a package named [[https://github.com/alexluigit/dirvish][dirvish]], a true work of art. It is:
+ Fast;
+ Unobtrusive;
+ Elegant;

It is all this, and it still is dired. It is exactly what a file manager in Emacs should be. I thought ranger was still lightyears ahead of dired, but dirvish has proved me wrong.

Dirvish solves these issues for me:
- It provides file copying/movement that is *both* multi-stage and asynchronous (unlike existing packages).  This is a game changer.
- Image preview is actually fast and usable.  I had stopped using all packages for image preview before because they didn't work well.  With dirvish, once an image is cached, it's as fast as any preview method that ranger has, and there is no flicker (unlike some ranger preview methods).  This is also a game changer.
- File preview in general works flawlessly out of the box and is customizable
- Dirvish is gorgeous, more so than ranger, but without sacrificing speed
  - The mode line is simple, customizable, and easy on the eyes
  - Icon display is fast/lazy unlike dired-all-the-icons, which is unusably slow
  - It can also replace the functionality of dired-k (very slow) and dired-git-info
  - I only had to customize one face to get it to look great with my theme
- It provides a 3-pane layout that just works (parent directory, current directory, preview).  I never used ranger.el's 3-pane layout, but I will use dirvish's.
- It provides various other helpful commands/features like bookmarks
- It is a minimal layer on top of dired and requires minimal configuration.  I had to make many more keybindings for ranger.el since it creates alternatives for a lot of existing dired commands, and I had a bunch of ugly configuration because it was comparably invasive (as both a dired user and as an evil user).

Dirvish replaces
- Replaces ranger.el (though not a ranger clone)
- Replaces dired-async, tmtxt-dired-async, dired-ranger, etc.
- Replaces dired-all-the-icons with a much more performant implementation
- Can replace dired-k, dired-git-info, and diff-hl-dired-mode (though my experience with diff-hl was much better than dired-k)
#+begin_src emacs-lisp
(require 'init-dired)
#+end_src

#+include: "lisp/init-dired.el" src emacs-lisp :tangle no
* Selection and search
This is one of my favourite parts. I think that fast selection, completing and search are a must, always, everywhere.

** Monster trio of completion
As Completion UI [[https://github.com/minad/vertico][Vertico]] is my preferred choice, it's lightweight and fast, and relies on Emacs internals. [[https://github.com/minad/marginalia/][Marginalia]] for rich annotations provides a summary for candidates.
Completion can be better with an [[https://github.com/oantolin/orderless][Orderless]] (similar to FZF, if you know). Orderless is also customizable for matching style.
#+begin_src emacs-lisp
(require 'init-complete)
#+end_src

#+include: "lisp/init-complete.el" src emacs-lisp :tangle no
** Embark
[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context, exactly like a contextual menu.
#+begin_src emacs-lisp
(require 'init-embark)
#+end_src

#+include: "lisp/init-embark.el" src emacs-lisp :tangle no
** Consult
[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read.

Consult offers, for example:
- Buffer switching command =consult-buffer= to switch between buffers and recently opened files.
- Multiple asynchronous search commands:
  - =consult-grep=
  - =consult-ripgrep=
  - =consult-line=, which resembles [[https://github.com/abo-abo/swiper][Swiper]]
#+begin_src emacs-lisp
(require 'init-consult)
#+end_src

#+include: "lisp/init-consult.el" src emacs-lisp :tangle no
** Completion at point
I'm using [[https://github.com/minad/corfu][Corfu]] with [[https://github.com/minad/cape][Cape]] right now, while [[https://github.com/company-mode/company-mode][Company]] stuff is here due to other modes completion backends which relies on it. I prefer Corfu especially because it uses Emacs completion facilities, and child frames instead of overlays.

Completions are provided by commands which provide completion, or by Capfs (=completion-at-point-functions=). Many major modes implement a Capf, also LSP clients which talk to the LSP server to retrieve completion.

Cape provides extensions and backends. A great thing of Cape is the =cape-company-to-capf= adapter for Company backends, and it is very easy to use!

#+begin_src emacs-lisp
(require 'init-complete-in-buffer)
#+end_src

#+include: "lisp/init-complete-in-buffer.el" src emacs-lisp :tangle no
* Org Mode
#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
--- Carsten Dominik
#+end_quote

Org mode is the killer feature of Emacs. Markup language, agenda, brain, templates...you can do /literally/ (xD) everything.
** Essential configuration
I absolutely need focus when I'm editing my documents in the dark, so I want my buffer centered and lines untruncated.
Indentation is defined as a function for basic org-mode setup.
[[https://github.com/minad/org-modern][Org Modern]] replaces markup syntax with nice headings, TODOs etc.
#+begin_src emacs-lisp
(require 'init-org)
#+end_src

#+include: "lisp/init-org.el" src emacs-lisp :tangle no
** Babel and Tempo
To execute or export code in =org-mode= code blocks, we need to set up =org-babel-load-languages= for each language. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
To add more =src= block templates, just copy one of the lines and change the two strings at the end, the first to be the template name and the second to contain the name of the language ([[https://orgmode.org/worg/org-contrib/babel/languages.html][listed here]]).

There's also a snippet that adds a hook to =org-mode= buffers so that ~archer-org-babel-tangle-config~ gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files. This function is inspired by David Wilson of System Crafters.

#+begin_src emacs-lisp
(require 'init-org-languages)
#+end_src

#+include: "lisp/init-org-languages.el" src emacs-lisp :tangle no
** Exporting
#+begin_src emacs-lisp
(require 'init-org-export)
#+end_src

Org is surely nice, but what about export?
Wonderful, but it needs some tweaks, and not only for presentations.

The first section of this file is regards good LaTeX export through =ox-latex=.
The best way to set export options is [[https://jakebox.github.io/youtube/org_latex_video.html][the following]].

Structure every file like this:

#+begin_src org
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [letterpaper]
#+OPTIONS: toc:nil
#+SETUPFILE: ~/your/path/to/setup/file.org
#+end_src

Reveal.js presentations are exported through =ox-reveal=, which is very simple to configure.

The hidden gem is =ox-hugo=, you can manage your website content from Emacs, that's cool. You can also manage your contents with a single file, multiple files, or both ways!

#+include: "lisp/init-org-export.el" src emacs-lisp :tangle no

** Useful links
+ [[https://www.labri.fr/perso/nrougier/GTD/index.html][Get Things Done with Emacs]]
* Development
All my packages needed to develop in a decent way. Bye IDEs.
** Projects management and Git
[[https://github.com/bbatsov/projectile][Projectile]] provides easy project management and navigation.
Common Git operations are easy to execute quickly using _Magit_'s command panel system.
*NOTE*: Make sure to configure a GitHub token before using this package!
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting started with Magit]]
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]

#+begin_src emacs-lisp
(require 'init-projects)
#+end_src

#+include: "lisp/init-projects.el" src emacs-lisp :tangle no
** Code style
[[https://github.com/lassik/emacs-format-all-the-code][Format-all-the-code]] lets you auto-format source code in many languages. It is very nice, you need only the formatters installed on your system.

[[https://github.com/glasserc/ethan-wspace][Ethan-wspace]] is a nice package to avoid useless/horrible extra whitespaces.

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

The rest of =init-code-style.el= regards tab settings.

#+begin_src emacs-lisp
(require 'init-code-style)
#+end_src

#+include: "lisp/init-code-style.el" src emacs-lisp :tangle no
** Syntax checking
Lately I've been trying =Flymake=, built-in into Emacs. [[https://www.flycheck.org/][Flycheck]] has many checkers though, so here we go with [[https://github.com/purcell/flymake-flycheck]["how to use Flycheck chekers in Flymake"]]

#+begin_src emacs-lisp
(require 'init-spell-and-check)
#+end_src

#+include: "lisp/init-spell-and-check.el" src emacs-lisp :tangle no

** LSP
[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] support with multiples languages support for Emacs.
There are two ways to use LSP with Emacs: [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] and [[https://github.com/joaotavora/eglot][Eglot]] (built into Emacs 29). I prefer the latter for the following reason, given by the author of =Eglot=:
#+begin_quote
Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there's nothing to configure. It's a minimalist approach focused on user experience and performance.
#+end_quote
To avoid copy-pasting, here the [[https://github.com/joaotavora/eglot#historical-differences-to-lsp-modeel][full comparision]].

#+begin_src emacs-lisp
(require 'init-lsp)
#+end_src

#+include: "lisp/init-lsp.el" src emacs-lisp :tangle no
** Snippets
#+begin_src emacs-lisp
;; (require 'init-snippets)
#+end_src

#+include: "lisp/init-snippets.el" src emacs-lisp :tangle no
** Extra modes
#+begin_src emacs-lisp
(require 'init-extra-modes)
#+end_src

#+include: "lisp/init-extra-modes.el" src emacs-lisp :tangle no

* Frontend for other uses
Emacs can be a frontend for almost everything.
** Mails
I've used =mu4e= (mu-for-emacs) for almost a year. It is an e-mail client for GNU Emacs version 24.4 or higher, built on top of the [[https://github.com/djcb/mu][mu]] e-mail search engine. =mu4e= is optimized for quickly processing large amounts of e-mail.
However, I've always struggled with it, and I recently tried [[https://notmuchmail.org/][notmuch]]. Oh boy, I wish I had done it sooner!
It is a very fast tag-based email indexer and system to use with multiple clients, Emacs, Neomutt, and so on.

#+begin_quote
"Not much mail" is what Notmuch thinks about your email collection. Even if you receive 12000 messages per month or have on the order of millions of messages that you've been saving for decades. Regardless, Notmuch will be able to quickly search all of it. It's just plain not much mail.
#+end_quote

#+begin_quote
"Not much mail" is also what you should have in your inbox at any time. Notmuch gives you what you need, (tags and fast search), so that you can keep your inbox tamed and focus on what really matters in your life, (which is surely not email).
#+end_quote

#+begin_src emacs-lisp
(require 'init-mail)
#+end_src

#+include: "lisp/init-mail.el" src emacs-lisp :tangle no

** Writing

TeX, with AUCTeX!

#+begin_src emacs-lisp
;; (require 'init-tex)
#+end_src

#+include: "lisp/init-tex.el" src emacs-lisp :tangle no
** Reading
I don't like DocView because the rendering is given by images in tmp storage, zoom is "bad" (for me, of course), rendering can be slow, with especially PDFs big.
My choice is [[https://github.com/vedang/pdf-tools][pdf-tools]], that renders on demand pages, has good quality, and is very comfortable.

#+begin_src emacs-lisp
(require 'init-reading)
#+end_src

#+include: "lisp/init-reading.el" src emacs-lisp :tangle no
** Terminal
Vterm is an actual terminal emulator and my preferred method for executing shell command in Emacs. The main downsides it has for me compared to eshell and shell currently:

- There are some things that need to be polished (e.g. it changes cursor shape which is confusing when using different cursors for evil: #342)
- Every character is sent to the terminal immediately, so evil line-editing is not yet possible (minor since Emacs line-editing keybindings are more efficient, and the current behavior works with autosuggestions; sending the line only on enter would break autosuggestions)
- It does not currently integrate with completing-read frontends for completion

It might be cool to eventually replace a dedicated terminal emulator with vterm. Scrollback search, navigation, and copying are definitely better in Emacs than in any terminal or multiplexer.

Thanks to this [[https://www.reddit.com/r/emacs/comments/u5rx6z/open_vterm_in_resized_horizontal_split/][thread]] vterm-toggle is no more necessary!

#+begin_src emacs-lisp
(require 'init-shell)
#+end_src

#+include: "lisp/init-shell.el" src emacs-lisp :tangle no
** Telegram
Beautiful client, maybe the best telegram client around. A PITA, sometimes, due to tdlib compatibility.

#+begin_src emacs-lisp
(require 'init-telega)
#+end_src

#+include: "lisp/init-telega.el" src emacs-lisp :tangle no
*** Useful commands
+ ~c~ telega-msg-copy-text
+ ~l~ telega-msg-copy-link
+ ~^~ telega-msg-pin-toggle
+ ~M-g ^~ telega-chatbuf-goto-pinned-message
+ telega-msg-redisplay
** Media
Manage your media from Emacs? Possible!
#+begin_src emacs-lisp
;; (require 'init-media)
#+end_src

#+include: "lisp/init-media.el" src emacs-lisp :tangle no
** Daemons control
Nice mode to control your system (and user) services without leaving Emacs.

#+begin_src emacs-lisp
(setup (:pkg daemons))
#+end_src
* Games
Did you know that emacs can play games (sort of) too?
#+begin_src emacs-lisp
(require 'init-games)
#+end_src

#+include: "lisp/init-games.el" src emacs-lisp :tangle no
* End
#+begin_src emacs-lisp
;;; init.el ends here
#+end_src

This is the end of my =init.el=, and of my configuration.
* Useful things
** My experience
I started using Emacs in late 2019, at the beginning of university.
Why? I needed something to write notes in a fast way, but I didn't last long: writing notes during my lessons slowed me down, probably because slides given by professors were enough.
Anyway, discovering Emacs was a surprise, and at first it was terrible, because I didn't know where to start!
Too many things to learn, but the community is awesome, resources are good, documentation is almost perfect, and it's VERY fun. So, I gave a chance to myself to learn Emacs.
*** How I learned?
=C-h=, essentially, self-documentation is useful ;).
Also EmacsWiki, videos and blog posts, manual, and so on.
*** Good resources
My learning path has been discontinuous, but good enough to learn this beautiful piece of software from 1976 (1984, for GNU Emacs).
- [[https://systemcrafters.cc/][System Crafters]] :: helped me a lot with the series `Emacs from Scratch`, his channel introduced Emacs to me for the first time. My first configuration was almost a copy-paste of David's configuration...This slowed me down *a lot*.
- [[https://protesilaos.com/][Protesilaos Stavrou]] :: is a gold mine, he's a very clever, wonderful person. I appreciate his verbose explanations about any kind of magic trick he does with Emacs.
- [[https://www.youtube.com/user/mzamansky][Mike Zamansky]] :: has a series dedicated to Emacs, and helped me to figure out some obscure matters.
- [[https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng][Andrew Tropin]] :: helped me on both Emacs and Nix (now he's using Guix), the problem of reproducibility is fascinating, and this guy is really prepared.
- [[https://github.com/purcell/emacs.d][Steve Purcell]] :: has a dev-centered configuration, but everyone can take inspiration from its dotfiles.
- [[https://github.com/seagle0128][Vincent Zhang]] :: author of [[https://github.com/seagle0128/.emacs.d][Centaur]], really good work.
- [[https://github.com/doomemacs/doomemacs][Doom Emacs]] :: an opinionated distribution of Emacs, providing many modules and optimizations.
