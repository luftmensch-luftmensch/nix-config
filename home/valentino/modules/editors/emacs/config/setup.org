:PROPERTIES:
:lisp_path: ~/nix-config/home/valentino/modules/editors/emacs/config/lisp/
:END:
#+AUTHOR: Valentino Bocchetti
#+TITLE: Emacs configuration
#+DESCRIPTION: My personal config using setup.el
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :result silent :mkdirp yes :noweb yes
* Preface
#+begin_quote
One day we won't hate one another, no young boy will march to war and I will clean up my Emacs config. But that day isn't today.

Emacs is /blursed/ due to it's global state. Since Emacs packages are just a way to pin targeted ~eval~'s, and everything can touch everything, the world is both within reach, and out of grasp. You can do much if you cut at the joints, and you may seek understanding by inspecting the editor to see what is going on underneath. As with most tools, you get back what you put into it. This repository reflects a playground of ideas concerning prose, code, aesthetics, and time management -- an ever evolving mess.
#+end_quote

#+begin_src text
  ,           ,
 /             \
((__-^^-,-^^-__))
 `-_---' `---_-'
  `--|o` 'o|--'
     \  `  /
      ): :(
      :o_o:
       "-"
#+end_src

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt
to keep my =~/config/emacs/= tidy, but still be able to keep it all in one
file. I aim to briefly explain all my configurations as I go along!

I would not recommend using this configuration /as-is/, because it
probably contains a lot you don't really need. I do, however, hope people
find some golden nuggets that they can smuggle into their own configs.
** Notes on this document
Every file is commented in a decent way, but I'm not very verbose. Sometimes I describe every single things written (in a decent way, I guess), other times, I'm awful.
Anyway, this document is not intended as a way to show my =elisp-fu= or something like that. When you read this, imagine a diary, a tale of my [mis]adventures 🤣.
** Before =gui= - =early-init.el=
Is good practice to define an =early-init.el= file: this kind of approach provides better loading for essential stuff.
- There are some tweaks taken from [[https://github.com/doomemacs/doomemacs][DOOM Emacs]], [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]], [[https://protesilaos.com/emacs/dotemacs][Protesilaos Stavrou]]... (I'll put some credits at the end of this document, along with useful resources)
- The package manager, [[https://github.com/radian-software/straight.el][straight.el]], provides reproducibility (like Nix and Guix) with recipes, allows the editing of packages and manual version control operations on repos. [[https://github.com/radian-software/straight.el#advantages-of-straightel-5][Here]] the list of advantages.
#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes :results silent
;;; early-init.el --- Emacs early init -*- lexical-binding: t -*-
;;

;; Author: luftmensch-luftmensch

;; This file is an early-init file for Emacs (introduced with Emacs 27).
;; It will be executed before init.el when emacs is loaded.

;; -------------------------------------------------------------------------------- ;;
;;   This file was auto-tangled from an orgmode file. (C)  luftmensch-luftmensch    ;;
;; -------------------------------------------------------------------------------- ;;

;; This file IS NOT intended to be edited!

;;; Commentary:

;; Early init file has been introduced in Emacs 27, it is a file loaded
;; before GUI is initialized, so unwanted elements are here.
;; Example: scroll-bars, fringes, menu-bar, tool-bar.

;;; Code:

;; Restore things after init
(defvar +emacs--startup-restore-alist nil
  "Variables and values to restore after init.")

;; Speed up init
(add-hook 'emacs-startup-hook
          (defun emacs-startup@restore-values ()
            "Restore values set during init.
This applies values in `+emacs--startup-restore-alist'."
            (dolist (a +emacs--startup-restore-alist)
              (set (car a) (cdr a)))))

(defun +set-during-startup (variable value &optional restore)
  "Set VARIABLE to VALUE during startup, but restore to RESTORE.
If RESTORE is nil or not passed, save the original value and
restore that."
  (unless after-init-time
    (setf (alist-get variable +emacs--startup-restore-alist)
          (or restore (symbol-value variable)))
    (set-default variable value)))

;;; Define a directory and an expanding function
(defmacro +define-dir (name directory &optional docstring inhibit-mkdir)
  "Define a variable and function NAME expanding to DIRECTORY.
DOCSTRING is applied to the variable.  Ensure DIRECTORY exists in
the filesystem, unless INHIBIT-MKDIR is non-nil."
  (declare (indent 2)
           (doc-string 3))
  (unless inhibit-mkdir
    (make-directory (eval directory) :parents))
  `(progn
     (defvar ,name ,directory
       ,(concat docstring (when docstring "\n")
                "Defined by `/define-dir'."))
     (defun ,name (file &optional mkdir)
       ,(concat "Expand FILE relative to variable `" (symbol-name name) "'.\n"
                "If MKDIR is non-nil, the directory is created.\n"
                "Defined by `/define-dir'.")
       (let ((file-name (expand-file-name (convert-standard-filename file)
                                          ,name)))
         (when mkdir
           (make-directory (file-name-directory file-name) :parents))
         file-name))))

(+define-dir .etc (locate-user-emacs-file ".etc")
  "Directory for all of Emacs's various files.
See `no-littering' for examples.")

(+define-dir .var (locate-user-emacs-file "var")
  "Directory for all of Emacs's various files.
See `no-littering' for examples.")

;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, then reset it later by
;; enabling `gcmh-mode'.

;; Garbage collection
(+set-during-startup 'gc-cons-threshold most-positive-fixnum)

(add-hook 'minibuffer-setup-hook (defun garbage-collect@minibuffer-enter ()
                                   (setq gc-cons-threshold most-positive-fixnum)))
(add-hook 'minibuffer-exit-hook (defun garbage-collect@minibuffer-exit ()
                                  (setq gc-cons-threshold 800000)))

;; Debug during init
(unless (eq debug-on-error 'startup)
  (+set-during-startup 'debug-on-error 'init))

;; (setq gc-cons-threshold  most-positive-fixnum)

;; Add load-path for submodules
;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
(push (locate-user-emacs-file "lisp") load-path)

;; Set a better directory to store the native comp cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (convert-standard-filename
    (expand-file-name  "var/eln-cache/" user-emacs-directory))))
;; (when (and (fboundp 'native-comp-available-p)
;;            (native-comp-available-p))
;;   (add-to-list 'native-comp-eln-load-path (expand-file-name "var/eln-cache/" user-emacs-directory)))

;; From DOOM
;; Prevent unwanted runtime compilation for gccemacs (native-comp) users;
;; packages are compiled ahead-of-time when they are installed and site files
;; are compiled when gccemacs is installed.
(when (and (fboundp 'native-comp-available-p)
           (native-comp-available-p))
  (setq native-comp-deferred-compilation nil)
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil))

;; Another trick from DOOM
(unless (or (daemonp)
            noninteractive
            init-file-debug)
  (let ((old-file-name-handler-alist file-name-handler-alist))
    ;; `file-name-handler-alist' is consulted on each `require', `load' and
    ;; various path/io functions. You get a minor speed up by unsetting this.
    ;; Some warning, however: this could cause problems on builds of Emacs where
    ;; its site lisp files aren't byte-compiled and we're forced to load the
    ;; *.el.gz files (e.g. on Alpine).
    (setq-default file-name-handler-alist nil)
    ;; ...but restore `file-name-handler-alist' later, because it is needed for
    ;; handling encrypted or compressed files, among other things.
    (defun doom-reset-file-handler-alist-h ()
      (setq file-name-handler-alist
            ;; Merge instead of overwrite because there may have bene changes to
            ;; `file-name-handler-alist' since startup we want to preserve.
            (delete-dups (append file-name-handler-alist
                                 old-file-name-handler-alist))))
    (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h 101))

  ;; Premature redisplays can substantially affect startup times and produce
  ;; ugly flashes of unstyled Emacs.
  (setq-default inhibit-redisplay t
                inhibit-message t)
  (add-hook 'window-setup-hook
            (lambda ()
              (setq-default inhibit-redisplay nil
                            inhibit-message nil)
              (redisplay))))

;; From DOOM
;;
;; NOTE: In DOOM these are defined in another file, not in early init, that's horrible because
;; starting a client where this settings are defined later causes a little flash at startup (before redisplay)
;; where menu-bar is present.
;;
;; Not calling `menu-bar-mode', `tool-bar-mode', and
;; `scroll-bar-mode' because they do extra and unnecessary work that can be more
;; concisely and efficiently expressed with these six lines:
(push '(menu-bar-lines . 0)   default-frame-alist)
(push '(tool-bar-lines . 0)   default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; And set these to nil so users don't have to toggle the modes twice to
;; reactivate them.
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil
      column-number-mode t
      fringe-mode 10)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
	        (lambda ()
	          (message "Emacs loaded %d packages in %s with %d garbage collections."
		                 (hash-table-count straight--profile-cache)
		                 (format "%.2f seconds"
			                       (float-time
			                        (time-subtract after-init-time before-init-time)))
		                 gcs-done)))

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil
      package-quickstart nil)

;; Configure and bootstrap `straight.el'
(setq straight-repository-branch "develop"
      straight-base-dir .etc
      straight-check-for-modifications '(check-on-save find-when-checking)
      ;; used for :fork so don't need to specify settings
      straight-host-usernames '((github . "lufthmensch-luftmensch")
                                (gitlab . "lufthmensch-luftmensch"))
      straight-profiles `((nil . ,(expand-file-name "straight/versions/lock.el" user-emacs-directory))))

(defvar bootstrap-version)
(let ((bootstrap-file
       ;; (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)
       (expand-file-name "straight/repos/straight.el/bootstrap.el" straight-base-dir))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Additional post-setup of `straight.el'
;; Early-loaded packages -- those that, for some reason or another,
;; need to be ensured to be loaded first.
(require 'straight-x)

;;; Appendix

;; Get rid of a dumb alias.  straight-ಠ_ಠ-mode really slows down all
;; minibuffer completion functions.  Since it's a (rarely-used, even)
;; alias anyway, I just define it back to nil.  By the way, the alias
(defalias 'straight-ಠ_ಠ-mode nil)

;;; early-init.el ends here
#+end_src
* Base configuration
** init.el
#+begin_src emacs-lisp :tangle init.el :result silent :mkdirp yes
;;; init.el ---  Emacs configuration -*- coding: utf-8 ; lexical-binding: t -*-

;; Author: luftmensch-luftmensch

;; This file IS NOT intended to be edited!

;;; Commentary:
;;                    ____,
;;                   /.---|
;;                   `    |     ___
;;                       (=\.  /-. \
;;                        |\/\_|"|  |
;;                        |_\ |;-|  ;
;;                        | / \| |_/ \
;;                        | )/\/      \
;;                        | ( '|  \   |
;;                        |    \_ /   \
;;                        |    /  \_.--\
;;                        \    |    (|\`
;;                         |   |     \
;;                         |   |      '.
;;                         |  /         \
;;                         \  \.__.__.-._)
;;
;;
;; Well, hello there! How are you doing wanderer? Looking for some
;; lisp goodness?  You might find it here, you might not.  If you do
;; find what you are looking for here, feel free take them with you,
;; give them a new life, a new filesystem, a new home.  All I ask of
;; you is to treat them with love and care.  They have always been
;; with me, playing along with my musing, catching little typos and
;; finding little bugs.  They stuck strong to my side even when the
;; Rust borrow checker came for me.  I'm not gonna lie, there has been
;; many a times where I have doubted my skills, but they have always
;; believed in me.
;;
;; If these parenthesis could talk, they would have a lot of stories
;; to tell.  Some good, some bad, some really ugly.  But at the end of
;; the day, I'm sure they are all happy to be where they are.
;;
;; If they give you any trouble, my GitHub issues is always open
;; unlike the doors of heaven.  They probably won't, these are the
;; good ones, but God sometimes have different plans, and everyone
;; gets hit with hard times.
;;
;; For any additional documentation and for editing this file, see leaf.org
;;
;; Good luck!

;; -------------------------------------------------------------------------------- ;;
;;   This file was auto-tangled from an orgmode file. (C)  luftmensch-luftmensch    ;;
;; -------------------------------------------------------------------------------- ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Code:

;; Do not pollute `init.el` with user customizations, use instead the proper `custom.el`
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file 'noerror 'nomessage))
;; A sane default for bookmarks (synched between devices)
(setq bookmark-default-file "~/config/emacs/bookmarks")

;; Disable damn sleep!
;; Yep, it's mandatory, that's the worst keybind ever, and should be remapped
(global-unset-key (kbd "C-z"))

;; Functions to determine if we are using a Nix installation of Emacs, or not, then we set our configuration path.
(defun vb/using-nix-p ()
  "Verifies if the running Emacs executable is under the `/nix/store/' path."
  (unless (or (equal system-type 'ms-dos)
              (equal system-type 'windows-nt))
    ;; Since there is no windows implementation of nix
    (string-prefix-p "/nix/store/"
                     (file-truename
                      (executable-find
                       (car command-line-args))))))
(defvar vb/config-path
  (let ((real-path (expand-file-name
                    "config/emacs/"
                    (getenv "HOME"))))
    (if (and (vb/using-nix-p)
             (file-exists-p real-path))
        (expand-file-name real-path)
      (expand-file-name user-emacs-directory))))

;; Require package management file
(require 'init-setup)

(require 'init-performance)

(require 'init-help)

(require 'init-fonts)

(require 'init-themes)

(require 'init-appearance)

(require 'init-modeline)

(require 'init-keybindings)
(require 'init-evil)

;; (require 'init-dash)

(require 'init-editing)

(require 'init-windows)

(require 'init-buffers)

(require 'init-dired)

(require 'init-complete)

(require 'init-embark)

(require 'init-consult)

(require 'init-complete-in-buffer)

(require 'init-org)

(require 'init-org-languages)

(require 'init-org-export)

(require 'init-projects)

(require 'init-code-style)

(require 'init-spell-and-check)

(require 'init-lsp)

;; (require 'init-snippets)

(require 'init-extra-modes)

(require 'init-mail)

;;(require 'init-tex)

(require 'init-reading)

(require 'init-shell)

(require 'init-telega)
(require 'init-games)

;; (require 'init-media)

;; Nice mode to control your system (and user) services without leaving Emacs.
(setup (:pkg daemons))


;;; init.el ends here
#+end_src
* Bootstrap w/ [[https://git.sr.ht/~pkal/setup][setup.el]]
We are requiring =init-setup=, where configuration tools based on macros (e.g. =use-package=, =leaf.el=, =setup.el=) are initialized.

I'm using [[https://git.sr.ht/~pkal/setup][setup.el]] right now.
Compared to =use-package=, =setup.el= is less declarative: you have more control, I would say that it's similar to vanilla Emacs configuration, but less verbose and with easy definition of new macros.

I also install [[https://github.com/radian-software/blackout][blackout.el]] (and define a macro with =setup.el=) here, to manage modes displayed in the mode-line.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-setup.el") :result silent :mkdirp yes
;;; init-setup.el --- `setup.el' configuration -*- lexical-binding: t -*-

;;; Commentary:

;; The package `setup.el' is configured here, with new forms and settings.

;;; Code:

(straight-use-package 'setup)
(require 'setup)

(defmacro +with-message (message &rest body)
  "Execute BODY, with MESSAGE.
If body executes without errors, MESSAGE...Done will be displayed."
  (declare (indent 1))
  (let ((msg (gensym)))
    `(let ((,msg ,message))
       (condition-case e
           (progn (message "%s..." ,msg)
                  ,@body)
         (:success (message "%s...done" ,msg))
         (t (signal (car e) (cdr e)))))))

;; From https://git.acdw.net/emacs/tree/lisp/+setup.el
(defun +setup-warn (message &rest args)
  "Warn the user with that something bad happened in `setup'.
MESSAGE should be formatted (optionally) with ARGS"
  (display-warning 'setup (format message args)))

(defun +setup-wrap-to-demote-errors (body name)
  "Wrap BODY in a `with-demoted-errors' block.
This behavior is prevented if `setup-attributes' contains the
symbol `without-error-demotion'.

This function differs from `setup-wrap-to-demote-errors' in that
it includes the NAME of the setup form in the warning output."
  (if (memq 'without-error-demotion setup-attributes)
      body
    `(with-demoted-errors ,(format "Error in setup form on line %d (%s): %%S"
			                             (line-number-at-pos)
			                             name)
       ,body)))

(add-to-list 'setup-modifier-list '+setup-wrap-to-demote-errors)
(unless (memq debug-on-error '(nil init))
  (define-advice setup (:around (fn head &rest args) +setup-report)
    (+with-progress ((format "[Setup] %S..." head))
                    (apply fn head args))))

;; Forms section
(setup-define :advice
  (lambda (symbol where function)
    `(advice-add ',symbol ,where ,function))
  :documentation "Add a piece of advice on a function.
See `advice-add' for more details."
  :after-loaded t
  :debug '(sexp sexp function-form)
  :ensure '(nil nil func)
  :repeatable t)

(setup-define :after
  (lambda (feature &rest body)
    `(:with-feature ,feature
       (:when-loaded ,@body)))
  :documentation "Eval BODY after FEATURE."
  :indent 1)

(setup-define :quit
  'setup-quit
  :documentation "Always stop evaluating the body.")

(setup-define :needs
  (lambda (executable)
    `(unless (executable-find ,executable)
       ,(setup-quit)))
  :documentation "If EXECUTABLE is not in the path, stop here."
  :repeatable 1)

(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
	                (cadr func)
	              func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :repeatable t
  :signature '(FUNC ...))

(setup-define :load-after
  (lambda (&rest features)
    (let ((body `(require ',(setup-get 'feature))))
      (dolist (feature (nreverse features))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES.")

(setup-define :with-after
  (lambda (features &rest body)
    (let ((body `(progn ,@body)))
      (dolist (feature (nreverse (ensure-list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :indent 1
  :documentation "Evaluate BODY after FEATURES are loaded.")

(setup-define :face
  (lambda (face spec) `(custom-set-faces (quote (,face ,spec))))
  :documentation "Customize FACE to SPEC."
  :signature '(face spec ...)
  :debug '(setup)
  :repeatable t
  :after-loaded t)

(setup-define :hide-mode
  (lambda (&optional mode)
    (let* ((mode (or mode (setup-get 'mode)))
           (mode (if (string-match-p "-mode\\'" (symbol-name mode))
	                   mode
	                 (intern (format "%s-mode" mode)))))
      `(setq minor-mode-alist
             (delq (assq ',mode minor-mode-alist)
	                 minor-mode-alist))))
  :documentation "Hide the mode-line lighter of the current mode.
Alternatively, MODE can be specified manually, and override the
current mode."
  :after-loaded t)

(setup-define :defer
  (lambda (features)
    `(run-with-idle-timer 1 nil
                          (lambda ()
                            ,features)))
  :documentation "Delay loading the feature until a certain amount of idle time has passed."
  :repeatable t)

;; Integration with `straight.el'
(defun setup--straight-handle-arg (arg var)
  (cond
   ((and (boundp var) (symbol-value var)) t)
   ((keywordp arg) (set var t))
   ((functionp arg) (set var nil) (funcall arg))
   ((listp arg) (set var nil) arg)))

(with-eval-after-load 'straight
  (setup-define :pkg
    (lambda (recipe &rest predicates)
      (let* ((skp (make-symbol "straight-keyword-p"))
             (straight-use-p (cl-mapcar
			                        (lambda (f) (setup--straight-handle-arg f skp)) predicates))
             (form `(unless (and ,@straight-use-p
			                           (condition-case e (straight-use-package ',recipe)
			                             (error (+setup-warn ":straight error: %S" ',recipe)
				                                  ,(setup-quit))
			                             (:success t)))
		                  ,(setup-quit))))
        ;; Keyword arguments --- :quit is special and should short-circuit
        (if (memq :quit predicates)
            (setq form `,(setup-quit))
          ;; Otherwise, handle the rest of them ...
          (when-let ((after (cadr (memq :after predicates))))
            (setq form `(with-eval-after-load ,(if (eq after t) (setup-get 'feature) after)
		                      ,form))))
        ;; Finally ...
        form))
    :documentation "Install RECIPE with `straight-use-package'.
If PREDICATES are given, only install RECIPE if all of them return non-nil.
The following keyword arguments are also recognized:
- :quit          --- immediately stop evaluating.  Good for commenting.
- :after FEATURE --- only install RECIPE after FEATURE is loaded.
	       If FEATURE is t, install RECIPE after the current feature."
    :repeatable nil
    :indent 1
    :shorthand (lambda (sexp)
	               (let ((recipe (cadr sexp)))
	                 (or (car-safe recipe) recipe)))))

(provide 'init-setup)
;;; init-setup.el ends here
#+end_src
* Performance enhancement
[[https://github.com/emacsmirror/gcmh][GCMH]] allows the auto-regulation of garbage collector based on idle timers.

During normal use a high GC threshold is set; when idling GC is triggered and a low threshold is set. Right now I'm good with 16MB for high threshold.
Other tweaks in this section have been stolen from DOOM and other configurations around.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-performance.el") :result silent :mkdirp yes
;;; init-performance.el --- Performances enhancement -*- lexical-binding: t -*-

;;; Commentary:

;; This file should contain tweaks to obtain better overall performances.

;;; Code:

(setup (:pkg gcmh)
  (:require)
  (:hide-mode)
  ;; The GC introduces annoying pauses and stuttering into our Emacs experience,
  ;; so we use `gcmh' to stave off the GC while we're using Emacs, and provoke it
  ;; when it's idle. However, if the idle delay is too long, we run the risk of
  ;; runaway memory usage in busy sessions. If it's too low, then we may as well
  ;; not be using gcmh at all.
  (:option gcmh-idle-delay 'auto ; Default 15 seconds
     gcmh-auto-idle-delay-factor 10
     gcmh-high-cons-threshold (* 16 1024 1024))
  (gcmh-mode 1))

;; Aaand, here other code stolen from DOOM.
;; Performances are really better with this snippet (for me).
(setup tweaks
  ;; Reduce *Message* noise at startup. An empty  buffer (or the dashboard)
  ;; is more than enough.
  (setq inhibit-startup-screen t
  inhibit-startup-echo-area-message user-login-name
  inhibit-default-init t
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode', which
  ;; pull in a ton of packages.
  ;; initial-major-mode 'fundamental-mode
  initial-scratch-message nil)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)
  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)

  ;; PGTK builds only: this timeout adds latency to frame operations, like
  ;; `make-frame-invisible', which are frequently called without a guard because
  ;; it's inexpensive in non-PGTK builds. Lowering the timeout from the default
  ;; 0.1 should make childframes and packages that manipulate them (like `lsp-ui',
  ;; `company-box', and `posframe') feel much snappier. See emacs-lsp/lsp-ui#613.
  (setq pgtk-wait-for-event-timeout 0.001)

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t))

(provide 'init-performance)
  ;;; init-appearance.el ends here
#+end_src
* Keyboard support
Sometimes we forget shortcuts as we type them, [[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command in a popup.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-help.el") :result silent :mkdirp yes
;;; init-help.el --- Sometimes we need help from someone/something :) -*- lexical-binding: t -*-

;;; Commentary:

;; The minibuffer is our best friend, let's use it more with extensions.

;;; Code:

(setup (:pkg which-key)
       (:hide-mode)
       (:option
        which-key-idle-delay 0.2
        which-key-prefix-prefix "◉ ")
       (which-key-mode 1))

(provide 'init-help)
;;; init-help.el ends here
#+end_src
* Appearance
In this section are contained line-numbers settings, modeline related configuration, minor tweaks for icons (needed also for dashboard) and colors.
** Fonts
Readability is important, another package from Protesilaos, much more!
Currently using ~Sarasa Font~ as font, I love it, also for variable-pitch face.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-fonts.el")
;;; init-fonts.el --- Appearance settings -*- lexical-binding: t -*-

;;; Commentary:

;; Only font configuration, nothing to say.

;;; Code:
(defgroup vb/faces()
  "Extensions for faces."
  :group 'faces)

(defcustom vb/font-height 140
  "Variable that specifies the font height."
  :type 'integer
  :group 'vb/faces)

(setup (:pkg fontaine)
  (:option x-underline-at-descent-line nil
           use-default-font-for-symbols t)

  (unless (version< emacs-version "28")
	  (setq-default text-scale-remap-header-line t))

  (:option vb/font-height (pcase (system-name)
                            ("atlas" 110)
                            ("kronos" 140)))


  ;; TODO: fix this, the state is not re-stored correctly.
  ;; (:option fontaine-latest-state-file (locate-user-emacs-file "var/fontaine-state.eld"))

  (:option fontaine-presets
		       `(
             ;; Sarasa
             (sarasa
              :default-family "Sarasa Mono Slab SC"
              :default-height ,vb/font-height)
             ;; Victor Mono
             ;; (victor
		         ;;  :default-family "VictorMono Nerd Font"
		         ;;  :default-height ,vb/font-height)
             ))

  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'sarasa))

  (:with-hook kill-emacs-hook
		(:hook fontaine-store-latest-preset))

  (:with-hook (modus-themes-after-load-theme-hook ef-themes-post-load-hook)
		(:hook fontaine-apply-current-preset)))

(provide 'init-fonts)
;;; init-fonts.el ends here
#+end_src
** Theming
I'm currently using [[https://protesilaos.com/emacs/ef-themes][Ef Themes]], with [[https://github.com/guidoschmidt/circadian.el][Circadian]] to set light/dark version, based on time. It's possible to switch themes on sunrise and sunset. Protesilaos made a great work, and these themes are, indeed, built into Emacs (but I always get the packaged version :D)

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-themes.el")
;;; init-themes.el --- Themes -*- lexical-binding: t -*-

;;; Commentary:

;; Configuration of `modus-themes' and `ef-themes', high accessibility themes by Protesilaos.

;;; Code:

(setup (:pkg modus-themes)
  ;; Preferences
  (:option modus-themes-org-blocks nil ;; 'gray-background
           modus-themes-mixed-fonts nil
           modus-themes-variable-pitch-ui nil
           modus-themes-italic-constructs t
           modus-themes-bold-constructs t)

  ;; Custom overrides
  (:option modus-themes-common-palette-overrides
           '((cursor magenta-cooler)
             ;; Modeline
             ;; (bg-mode-line-active bg-blue-subtle)
             (fg-mode-line-active fg-main)
             ;; borderless mode line
             (border-mode-line-active unspecified) ;; blue-intense
             (border-mode-line-inactive unspecified)

             ;; Region
             (bg-region bg-lavender)
             (fg-region unspecified)
             ;; Mouse Hovers
             (bg-hover bg-green-subtle)
             ;; Fringe invisible
             (fringe unspecified)
             ;; Inline code in prose (markup)
             (prose-block fg-dim)
             (prose-code green-cooler)
             (prose-done green)
             (prose-macro magenta-cooler)
             (prose-metadata fg-dim)
             (prose-metadata-value fg-alt)
             (prose-table fg-alt)
             (prose-tag magenta-faint)
             (prose-todo red)
             (prose-verbatim magenta-warmer)
             ;; Syntax
             (comment yellow-cooler)
             (string green-warmer)
             ;; Checkers
             (underline-err red-faint)
             (underline-warning yellow-faint)
             (underline-note cyan-faint)
             ;; Links - No underlines
             (underline-link unspecified)
             (underline-link-visited unspecified)
             (underline-link-symbolic unspecified)
             ;; Box buttons
             (bg-button-active bg-main)
             (fg-button-active fg-main)
             (bg-button-inactive bg-inactive)
             (fg-button-inactive "gray50")
             ;; Prompts
             (fg-prompt cyan)
             (bg-prompt bg-cyan-nuanced)
             ;; Completion
             (fg-completion-match-0 fg-main)
             (fg-completion-match-1 fg-main)
             (fg-completion-match-2 fg-main)
             (fg-completion-match-3 fg-main)
             (bg-completion-match-0 bg-blue-subtle)
             (bg-completion-match-1 bg-yellow-subtle)
             (bg-completion-match-2 bg-cyan-subtle)
             (bg-completion-match-3 bg-red-subtle)
             ;; Mail citations
             (mail-cite-0 blue)
             (mail-cite-1 yellow)
             (mail-cite-2 green)
             (mail-cite-3 magenta)
             (mail-part magenta-cooler)
             (mail-recipient cyan)
             (mail-subject red-warmer)
             (mail-other cyan-cooler)
             ;; Line numbers
             (fg-line-number-inactive "gray50")
             (fg-line-number-active fg-main)
             (bg-line-number-inactive unspecified)
             (bg-line-number-active unspecified)
             ;; Apply more colorful foreground to some headings (headings 0-8).
             ;; Level 0 is for Org #+title and related.
             (fg-heading-1 blue-warmer)
             (fg-heading-2 yellow-cooler)
             (fg-heading-3 cyan-cooler)
             ;; Make the Org agenda use alternative and varied colors.
             ;; default value (for timestamps and more)
             (date-common cyan)
             (date-deadline red-warmer)
             (date-event magenta-warmer)
             ;; for M-x calendar
             (date-holiday blue)
             (date-now yellow-warmer)
             (date-scheduled magenta-cooler)
             (date-weekday cyan-cooler)
             (date-weekend blue-faint)))

  (modus-themes-select 'modus-operandi))

(setup (:pkg ef-themes)

  (:option
   ef-themes-to-toggle '(ef-dark ef-frost)

   ef-themes-mixed-fonts nil ;; enable inheritance from ‘fixed-pitch’ in some faces
   ;; Heading styles
   ;; ef-themes-headings '((0 . (variable-pitch light 1.9))
   ;;                      (1 . (variable-pitch light 1.8))
   ;;                      (2 . (variable-pitch regular 1.7))
   ;;                      (3 . (variable-pitch regular 1.6))
   ;;                      (4 . (variable-pitch regular 1.5))
   ;;                      ;; absence of weight means `bold'
   ;;                      (5 . (variable-pitch 1.4))
   ;;                      (6 . (variable-pitch 1.3))
   ;;                      (7 . (variable-pitch 1.2))
   ;;                      (t . (variable-pitch 1.1)))

   ;; Use proportional fonts (‘variable-pitch’) in UI elements.
   ;; This includes the mode line, header line, tab bar, and tab line.
   ;; ef-themes-variable-pitch-ui t
   ;; Control the appearance of the ‘region’ face.
   ef-themes-region '(intense no-extend neutral)))

;; I set circadian in the configuration of my themes
(setup (:pkg circadian)
  (:load-after modus-themes)
  (:option circadian-themes '(("8:00" . modus-vivendi)
                              ("20:00" . modus-vivendi)))
  (circadian-setup))

(provide 'init-themes)
#+end_src
** UI settings
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-appearance.el")
;;; init-appearance.el --- Appearance settings -*- lexical-binding: t -*-

;;; Commentary:

;; This file should contain appearance settings stuff.

;;; Code:

(setup appearance
  (setq frame-title-format '(:eval (concat "emacs@" system-name " - "(format "%s  [%s]" (buffer-name) major-mode)))
        icon-title-format frame-title-format)

  ;; https://www.emacswiki.org/emacs/TransparentEmacs
  (set-frame-parameter nil 'alpha-background 90)

  (add-to-list 'default-frame-alist '(alpha-background . 90))
  ;; Stuff
  ;; Memo: Calendar back and forth M-{ M-}
  (setq calendar-week-start-day 1
        calendar-date-style 'european
        calendar-day-name-array ["Dom" "Lun" "Mar" "Mer" "Gio" "Ven" "Sab"]
        calendar-day-abbrev-array ["Dom" "Lun" "Mar" "Mer" "Gio" "Ven" "Sab"]
        calendar-day-header-array ["Dom" "Lun" "Mar" "Mer" "Gio" "Ven" "Sab"]
        calendar-month-name-array ["Gen" "Feb" "Mar" "Apr" "Mag"
  			                           "Giu" "Lug" "Ago" "Set" "Ott" "Nov" "Dic"])
  (setq display-time-default-load-average nil)
  (setq highlight-nonselected-windows nil)
  (setq echo-keystrokes 0.1)

  ;; Other graphical stuff
  (setq visible-bell nil)
  (setq x-gtk-use-system-tooltips t)
  (setq x-stretch-cursor nil)

  ;; Dialogs
  (setq use-dialog-box nil      ; Mouse events dialog
        use-file-dialog nil)    ; Disable dialog for files

  ;; Cursor
  (setq-default cursor-in-non-selected-windows nil)
  (setq-default cursor-type t)
  (blink-cursor-mode 0)

  ;; Bidirectional settings
  ;; (setq-default bidi-display-reordering 'left-to-right)
  ;; (setq-default bidi-paragraph-direction 'left-to-right)

  ;; Lines related
  (setq-default truncate-lines nil)
  (setq-default visual-line-mode t)

  (setq-default indicate-buffer-boundaries nil))

;; You must run `all-the-icons-install-fonts` the first time.
(setup (:pkg all-the-icons)
  (:require all-the-icons))
(provide 'init-appearance)
#+end_src
** Modeline
Just modeline customization. (Special thanks to [[https://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][amitp]] & [[https://gist.github.com/fhdhsni/990cba7794b4b6918afea94af0b30d66][fhdhsni]])
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-modeline.el")
;;; init-modeline.el --- Code for my custom mode line -*- lexical-binding: t -*-

;;; Commentary:

;;; Code:

(defgroup vb/modeline nil
  "Custom modeline that is stylistically close to the default."
  :group 'mode-line)

(defgroup vb/modeline-faces nil
  "Faces for my custom modeline."
  :group 'vb/modeline)

(defcustom vb/modeline-string-truncate-length 20
  "String length after which truncation should be done in small windows."
  :type 'natnum)

;;;; Faces

(defface vb/modeline-indicator-red
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#880000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff9f9f")
    (t :foreground "red"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-red-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#aa1111" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#ff9090" :foreground "black")
    (t :background "red" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-green
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#005f00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#73fa7f")
    (t :foreground "green"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-green-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#207b20" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#77d077" :foreground "black")
    (t :background "green" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-yellow
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#6f4000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#f0c526")
    (t :foreground "yellow"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-yellow-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#805000" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#ffc800" :foreground "black")
    (t :background "yellow" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-blue
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#00228a")
    (((class color) (min-colors 88) (background dark))
     :foreground "#88bfff")
    (t :foreground "blue"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-blue-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#0000aa" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#77aaff" :foreground "black")
    (t :background "blue" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-magenta
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#6a1aaf")
    (((class color) (min-colors 88) (background dark))
     :foreground "#e0a0ff")
    (t :foreground "magenta"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-magenta-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#6f0f9f" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#e3a2ff" :foreground "black")
    (t :background "magenta" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-cyan
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#004060")
    (((class color) (min-colors 88) (background dark))
     :foreground "#30b7cc")
    (t :foreground "cyan"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator')."
  :group 'vb/modeline-faces)

(defface vb/modeline-indicator-cyan-bg
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :background "#006080" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#40c0e0" :foreground "black")
    (t :background "cyan" :foreground "black"))
  "Face for modeline indicators with a background."
  :group 'vb/modeline-faces)

;;;; Common helper functions

(defun vb/modeline--string-truncate-p (str)
  "Return non-nil if STR should be truncated."
  (and (< (window-total-width) split-width-threshold)
       (> (length str) vb/modeline-string-truncate-length)
       (not (one-window-p :no-minibuffer))))

(defun vb/modeline-string-truncate (str)
  "Return truncated STR, if appropriate, else return STR.
Truncation is done up to `vb/modeline-string-truncate-length'."
  (if (vb/modeline--string-truncate-p str)
      (concat (substring str 0 vb/modeline-string-truncate-length) "...")
    str))

;;;; Keyboard macro indicator

(defvar-local vb/modeline-kbd-macro
    '(:eval
      (when (and (mode-line-window-selected-p) defining-kbd-macro)
        (propertize " KMacro " 'face 'vb/modeline-indicator-blue-bg)))
  "Mode line construct displaying `mode-line-defining-kbd-macro'.
Specific to the current window's mode line.")

;;;; Narrow indicator

(defvar-local vb/modeline-narrow
    '(:eval
      (when (and (mode-line-window-selected-p)
                 (buffer-narrowed-p)
                 (not (derived-mode-p 'Info-mode 'help-mode 'special-mode 'message-mode)))
        (propertize " Narrow " 'face 'vb/modeline-indicator-cyan-bg)))
  "Mode line construct to report the multilingual environment.")

;;;; Input method

(defvar-local vb/modeline-input-method
    '(:eval
      (when current-input-method-title
        (propertize (format " %s" current-input-method-title)
                    'mouse-face 'mode-line-highlight)))
  "Mode line construct to report the multilingual environment.")

;;;; Buffer status

;; TODO 2023-07-05: What else is there beside remote files?  If
;; nothing, this must be renamed accordingly.
(defvar-local vb/modeline-buffer-status
    '(:eval
      (when (file-remote-p default-directory)
        (propertize " @ "
                    'face 'vb/modeline-indicator-red-bg
                    'mouse-face 'mode-line-highlight)))
  "Mode line construct for showing remote file name.")

;;;; Evil state

(defvar evil-state)
(defvar evil-visual-selection)

(defun vb/modeline-evil-state-tag ()
  "Return mode line tag depending on the Evil state."
  (pcase evil-state
    ('normal (propertize "   " 'face 'vb/modeline-indicator-blue))
    ('insert (propertize "   " 'face 'vb/modeline-indicator-yellow))
    ('visual (propertize "   " 'face 'vb/modeline-indicator-magenta))
    ('motion (propertize "   " 'face 'vb/modeline-indicator-yellow))
    ('emacs (propertize "  " 'face 'vb/modeline-indicator-magenta))
    ('operator (propertize "   " 'face 'vb/modeline-indicator-red))
    ('replace (propertize "   " 'face 'vb/modeline-indicator-red))
    ('vb/basic (propertize "   " 'face 'vb/modeline-indicator-green))))

(defvar-local vb/modeline-evil
    '(:eval
      (when (and (mode-line-window-selected-p) (bound-and-true-p evil-mode))
        (vb/modeline-evil-state-tag)))
  "Mode line construct to display the Evil state.")

;;;; Buffer name and modified status

(defun vb/modeline-buffer-identification-face ()
  "Return appropriate face or face list for `vb/modeline-buffer-identification'."
  (let ((file (buffer-file-name)))
    (cond
     ((and (mode-line-window-selected-p)
           file
           (buffer-modified-p))
      '(italic mode-line-buffer-id))
     ((and file (buffer-modified-p))
      'italic)
     ((mode-line-window-selected-p)
      'mode-line-buffer-id))))

(defun vb/modeline--buffer-name ()
  "Return `buffer-name', truncating it if necessary.
See `vb/modeline-string-truncate'."
  (when-let ((name (buffer-name)))
    (vb/modeline-string-truncate name)))

(defun vb/modeline-buffer-name ()
  "Return buffer name, with read-only indicator if relevant."
  (let ((name (vb/modeline--buffer-name)))
    (if buffer-read-only
        (format "%s %s" (char-to-string #xE0A2) name)
      name)))

(defun vb/modeline-buffer-name-help-echo ()
  "Return `help-echo' value for `vb/modeline-buffer-identification'."
  (concat
   (propertize (buffer-name) 'face 'mode-line-buffer-id)
   "\n"
   (propertize
    (or (buffer-file-name)
        (format "No underlying file.\nDirectory is: %s" default-directory))
    'face 'font-lock-doc-face)))

(defvar-local vb/modeline-buffer-identification
    '(:eval
      (propertize (vb/modeline-buffer-name)
                  'face (vb/modeline-buffer-identification-face)
                  'mouse-face 'mode-line-highlight
                  'help-echo (vb/modeline-buffer-name-help-echo)))
  "Mode line construct for identifying the buffer being displayed.
Propertize the current buffer with the `mode-line-buffer-id'
face.  Let other buffers have no face.")

;;;; Major mode

(defun vb/modeline-major-mode-indicator ()
  "Return appropriate propertized mode line indicator for the major mode."
  (let ((indicator (cond
                    ((derived-mode-p 'text-mode) "§")
                    ((derived-mode-p 'prog-mode) "λ")
                    ((derived-mode-p 'comint-mode) ">_")
                    (t "◦"))))
    (propertize indicator 'face 'shadow)))

(defun vb/modeline-major-mode-name ()
  "Return capitalized `major-mode' without the -mode suffix."
  (capitalize (string-replace "-mode" "" (symbol-name major-mode))))

(defun vb/modeline-major-mode-help-echo ()
  "Return `help-echo' value for `vb/modeline-major-mode'."
  (if-let ((parent (get major-mode 'derived-mode-parent)))
      (format "Symbol: `%s'.  Derived from: `%s'" major-mode parent)
    (format "Symbol: `%s'." major-mode)))

(defvar-local vb/modeline-major-mode
    (list
     (propertize "%[" 'face 'vb/modeline-indicator-red)
     '(:eval
       (concat
        (vb/modeline-major-mode-indicator)
        " "
        (propertize
         (vb/modeline-string-truncate
          (vb/modeline-major-mode-name))
         'mouse-face 'mode-line-highlight
         'help-echo (vb/modeline-major-mode-help-echo))))
     (propertize "%]" 'face 'vb/modeline-indicator-red))
  "Mode line construct for displaying major modes.")

(defvar-local vb/modeline-process
    (list '("" mode-line-process))
  "Mode line construct for the running process indicator.")

;;;; Git branch and diffstat

(declare-function vc-git--symbolic-ref "vc-git" (file))

(defun vb/modeline--vc-branch-name (file backend)
  "Return capitalized VC branch name for FILE with BACKEND."
  (when-let ((rev (vc-working-revision file backend))
             (branch (or (vc-git--symbolic-ref file)
                         (substring rev 0 7))))
    (capitalize branch)))

;; NOTE 2023-07-27: This is a good idea, but it hardcodes Git, whereas
;; I want a generic VC method.  Granted, I only use Git but I still
;; want it to work as a VC extension.

;; (defun vb/modeline-diffstat (file)
;;   "Return shortened Git diff numstat for FILE."
;;   (when-let* ((output (shell-command-to-string (format "git diff --numstat %s" file)))
;;               (stats (split-string output "[\s\t]" :omit-nulls "[\s\f\t\n\r\v]+"))
;;               (added (nth 0 stats))
;;               (deleted (nth 1 stats)))
;;     (cond
;;      ((and (equal added "0") (equal deleted "0"))
;;       "")
;;      ((and (not (equal added "0")) (equal deleted "0"))
;;       (propertize (format "+%s" added) 'face 'shadow))
;;      ((and (equal added "0") (not (equal deleted "0")))
;;       (propertize (format "-%s" deleted) 'face 'shadow))
;;      (t
;;       (propertize (format "+%s -%s" added deleted) 'face 'shadow)))))

(declare-function vc-git-working-revision "vc-git" (file))

(defvar vb/modeline-vc-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mode-line down-mouse-1] 'vc-diff)
    (define-key map [mode-line down-mouse-3] 'vc-root-diff)
    map)
  "Keymap to display on VC indicator.")

(defun vb/modeline--vc-help-echo (file)
  "Return `help-echo' message for FILE tracked by VC."
  (format "Revision: %s\nmouse-1: `vc-diff'\nmouse-3: `vc-root-diff'"
          (vc-working-revision file)))

(defun vb/modeline--vc-text (file branch &optional face)
  "Prepare text for Git controlled FILE, given BRANCH.
With optional FACE, use it to propertize the BRANCH."
  (concat
   (propertize (char-to-string #xE0A0) 'face 'shadow)
   " "
   (propertize branch
               'face face
               'mouse-face 'mode-line-highlight
               'help-echo (vb/modeline--vc-help-echo file)
               'local-map vb/modeline-vc-map)
   ;; " "
   ;; (vb/modeline-diffstat file)
   ))

(defun vb/modeline--vc-details (file branch &optional face)
  "Return Git BRANCH details for FILE, truncating it if necessary.
The string is truncated if the width of the window is smaller
than `split-width-threshold'."
  (vb/modeline-string-truncate
   (vb/modeline--vc-text file branch face)))

(defvar vb/modeline--vc-faces
  '((added . vc-locally-added-state)
    (edited . vc-edited-state)
    (removed . vc-removed-state)
    (missing . vc-missing-state)
    (conflict . vc-conflict-state)
    (locked . vc-locked-state)
    (up-to-date . vc-up-to-date-state))
  "VC state faces.")

(defun vb/modeline--vc-get-face (key)
  "Get face from KEY in `vb/modeline--vc-faces'."
  (alist-get key vb/modeline--vc-faces 'up-to-date))

(defun vb/modeline--vc-face (file backend)
  "Return VC state face for FILE with BACKEND."
  (vb/modeline--vc-get-face (vc-state file backend)))

(defvar-local vb/modeline-vc-branch
    '(:eval
      (when-let* (((mode-line-window-selected-p))
                  (file (buffer-file-name))
                  (backend (vc-backend file))
                  ;; ((vc-git-registered file))
                  (branch (vb/modeline--vc-branch-name file backend))
                  (face (vb/modeline--vc-face file backend)))
        (vb/modeline--vc-details file branch face)))
  "Mode line construct to return propertized VC branch.")

;;;; Flymake errors, warnings, notes

(declare-function flymake--severity "flymake" (type))
(declare-function flymake-diagnostic-type "flymake" (diag))

;; Based on `flymake--mode-line-counter'.
(defun vb/modeline-flymake-counter (type)
  "Compute number of diagnostics in buffer with TYPE's severity.
TYPE is usually keyword `:error', `:warning' or `:note'."
  (let ((count 0))
    (dolist (d (flymake-diagnostics))
      (when (= (flymake--severity type)
               (flymake--severity (flymake-diagnostic-type d)))
        (cl-incf count)))
    (when (cl-plusp count)
      (number-to-string count))))

(defvar vb/modeline-flymake-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mode-line down-mouse-1] 'flymake-show-buffer-diagnostics)
    (define-key map [mode-line down-mouse-3] 'flymake-show-project-diagnostics)
    map)
  "Keymap to display on Flymake indicator.")

(defmacro vb/modeline-flymake-type (type indicator &optional face)
  "Return function that handles Flymake TYPE with stylistic INDICATOR and FACE."
  `(defun ,(intern (format "vb/modeline-flymake-%s" type)) ()
     (when-let ((count (vb/modeline-flymake-counter
                        ,(intern (format ":%s" type)))))
       (concat
        (propertize ,indicator 'face 'shadow)
        (propertize count
                    'face ',(or face type)
                    'mouse-face 'mode-line-highlight
                    ;; FIXME 2023-07-03: Clicking on the text with
                    ;; this buffer and a single warning present, the
                    ;; diagnostics take up the entire frame.  Why?
                    'local-map vb/modeline-flymake-map
                    'help-echo "mouse-1: buffer diagnostics\nmouse-3: project diagnostics")))))

(vb/modeline-flymake-type error "✖")
(vb/modeline-flymake-type warning "!")
(vb/modeline-flymake-type note "·" success)

(defvar-local vb/modeline-flymake
    `(:eval
      (when (and (bound-and-true-p flymake-mode)
                 (mode-line-window-selected-p))
        (list
         ;; See the calls to the macro `vb/modeline-flymake-type'
         '(:eval (vb/modeline-flymake-error))
         '(:eval (vb/modeline-flymake-warning))
         '(:eval (vb/modeline-flymake-note)))))
  "Mode line construct displaying `flymake-mode-line-format'.
Specific to the current window's mode line.")

;;;; Eglot

(with-eval-after-load 'eglot
  (setq mode-line-misc-info
        (delete '(eglot--managed-mode (" [" eglot--mode-line-format "] ")) mode-line-misc-info)))

(defvar-local vb/modeline-eglot
    `(:eval
      (when (and (featurep 'eglot) (mode-line-window-selected-p))
        '(eglot--managed-mode eglot--mode-line-format)))
  "Mode line construct displaying Eglot information.
Specific to the current window's mode line.")

;;;; Right side alignment

(defun vb/modeline--right-align-rest ()
  "Return string if everything after `vb/modeline-align-right'."
  (format-mode-line
   `(""
     ,@(cdr (memq 'vb/modeline-align-right mode-line-format)))))

(defun vb/modeline--right-align-width ()
  "Return pixel width of `vb/modeline--right-align-rest'."
  (string-pixel-width (vb/modeline--right-align-rest)))

(defun vb/modeline--box-p ()
  "Return non-nil if the `mode-line' has a box attribute."
  (and (face-attribute 'mode-line :box)
       (null (eq (face-attribute 'mode-line :box) 'unspecified))))

;; NOTE 2023-07-13: I could also do what I am doing in
;; `fontaine--family-list-variable-pitch' and check if the family is a
;; member of those, but I don't need that as I always inherit
;; `variable-pitch' in my themes instead of hardcoding the family.
(defun vb/modeline--variable-pitch-p ()
  "Return non-nil if the `mode-line' inherits `variable-pitch'."
  (when-let* ((mode-line-inherit (face-attribute 'mode-line :inherit))
              ((string-match-p "variable-pitch" (symbol-name mode-line-inherit)))
              (family-face (face-attribute mode-line-inherit :inherit))
              (variable-pitch
               (if (listp family-face)
                   (memq 'variable-pitch family-face)
                 (eq 'variable-pitch family-face))))
    variable-pitch))

;; I just came up with this experimentally, but I am not sure if it is
;; the best approach.
(defun vb/modeline--magic-number ()
  "Return constant for use in `vb/modeline-align-right'."
  (let ((height (face-attribute 'mode-line :height nil 'default))
        (m-width (string-pixel-width (propertize "m" 'face 'mode-line))))
    (round height (* m-width (* height m-width 0.001)))))

(defvar-local vb/modeline-align-right
    '(:eval
      (propertize
       " "
       'display
       (let ((box-p (vb/modeline--box-p))
             (variable-pitch-p (vb/modeline--variable-pitch-p))
             (magic-number (vb/modeline--magic-number)))
         `(space
           :align-to
           (- right
              right-fringe
              right-margin
              ,(ceiling
                (vb/modeline--right-align-width)
                (string-pixel-width (propertize "m" 'face 'mode-line)))
              ,(cond
                ;; FIXME 2023-07-13: These hardcoded numbers are
                ;; probably wrong in some case. I am still testing.
                ((and variable-pitch-p box-p)
                 (* magic-number 0.5))
                ((and (not variable-pitch-p) box-p)
                 (* magic-number 0.25))
                ((and variable-pitch-p (not box-p))
                 0)
                ;; No box, no variable pitch, but I am keeping it as
                ;; the fallback for the time being.
                (t (* magic-number -0.1))))))))
  "Mode line construct to align following elements to the right.
Read Info node `(elisp) Pixel Specification'.")

;;;; Miscellaneous

(defvar-local vb/modeline-misc-info
    '(:eval
      (when (mode-line-window-selected-p)
        mode-line-misc-info))
  "Mode line construct displaying `mode-line-misc-info'.
Specific to the current window's mode line.")

;;;; Risky local variables

;; NOTE 2023-04-28: The `risky-local-variable' is critical, as those
;; variables will not work without it.
(dolist (construct '(vb/modeline-kbd-macro
                     vb/modeline-narrow
                     vb/modeline-input-method
                     vb/modeline-buffer-status
                     vb/modeline-evil
                     vb/modeline-buffer-identification
                     vb/modeline-major-mode
                     vb/modeline-process
                     vb/modeline-vc-branch
                     vb/modeline-flymake
                     vb/modeline-eglot
                     vb/modeline-align-right
                     vb/modeline-misc-info))
  (put construct 'risky-local-variable t))

;;;; Subtle mode line style

;; (defun vb/modeline-set-faces (_theme)
;;   "Make THEME mode lines subtle."
;;   (let ((subtle (face-foreground 'shadow)))
;;     (custom-set-faces
;;      `(mode-line ((t :background unspecified :box unspecified :overline ,subtle)))
;;      `(mode-line-active ((t :inherit mode-line :box ,subtle)))
;;      `(mode-line-inactive ((t :background unspecified :foreground ,subtle :box unspecified :overline ,subtle))))))

;; TODO: Find why subtle does not work on daemon-mode
(defun vb/modeline-set-faces (_theme)
  "Make THEME mode lines subtle."
  (let ((subtle (face-foreground 'shadow)))
    (custom-set-faces
     `(mode-line ((t :background unspecified :box unspecified :overline ,subtle)))
     ;; `(mode-line-active ((t :inherit mode-line :box ,subtle)))
     ;; `(mode-line-inactive ((t :background unspecified :foreground ,subtle :box unspecified :overline ,subtle)))
     `(mode-line-active ((t :inherit mode-line :box "#989898")))
     `(mode-line-inactive ((t :background unspecified :foreground "#989898" :box unspecified :overline "#989898"))))))

(defun vb/modeline-unset-faces ()
  "Make window dividers for THEME invisible."
  (custom-set-faces
   `(mode-line (( )))
   `(mode-line-active (( )))
   `(mode-line-inactive (( )))))

(defun vb/modeline--enable-mode ()
  "Enable `vb/modeline-subtle-mode'."
  (vb/modeline-set-faces nil)
  (add-hook 'enable-theme-functions #'vb/modeline-set-faces))

(defun vb/modeline--disable-mode ()
  "Disable `vb/modeline-subtle-mode'."
  (vb/modeline-unset-faces)
  (remove-hook 'enable-theme-functions #'vb/modeline-set-faces))

;;;###autoload
(define-minor-mode vb/modeline-subtle-mode
  "Increase the padding/spacing of frames and windows."
  :global t
  (if vb/modeline-subtle-mode
      (vb/modeline--enable-mode)
    (vb/modeline--disable-mode)))

(setup modeline
  (setq-default mode-line-format
                '("%e"
                  vb/modeline-kbd-macro
                  vb/modeline-narrow
                  vb/modeline-buffer-status
                  vb/modeline-input-method
                  vb/modeline-evil
                  vb/modeline-buffer-identification
                  "  "
                  vb/modeline-major-mode
                  vb/modeline-process
                  "  "
                  vb/modeline-vc-branch
                  "  "
                  vb/modeline-which-function
                  vb/modeline-align-right
                  "  "
                  vb/modeline-eglot
                  "  "
                  vb/modeline-flymake
                  "  "
                  vb/modeline-misc-info))
  (vb/modeline-subtle-mode 1))

(provide 'init-modeline)
;;; vb/modeline.el ends here
#+end_src
* Interface interaction
This section contains my file and buffer related configurations. Nothing special.
** Keybindings on steroids w/ [[https://github.com/noctuid/general.el][general.el]]
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-keybindings.el")
;;; init-keybindings.el --- Evil mode -*- lexical-binding: t -*-

;;; Commentary:

;;; Code:
(setup (:pkg general)
  (general-evil-setup)
  (defun code/indent (beg end times)
    "Indent selection for n TIMES with BEG and END directive."
    (interactive "r\nP")
    (indent-code-rigidly beg end (* times 2)) (setq deactivate-mark nil))
  (general-vmap
    :keymaps 'override
    "<" #'(lambda (b e n) (interactive "r\nP") (code/indent b e (if n (- n) -1)))
    ">" #'(lambda (b e n) (interactive "r\nP") (code/indent b e (if n n 1))))
  (general-create-definer vb/leader-key
    :states '(normal dired insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  ;; Override <C-c> emacs keymap
  (general-create-definer vb/ctrl-c-keys
    :prefix "C-c")

  ;; Override <C-x> emacs keymap
  (general-create-definer vb/ctrl-x-keys
    :prefix "C-x")

  (vb/leader-key
    ;; Elfeed
    "e"  '(:ignore t :which-key "Elfeed")
    "el" '(elfeed :which-key "Elfeed - view")
    "eu" '(elfeed-update :which-key "Elfeed - update")

    ;; EMMS
    "a"  '(:ignore t :which-key "Music")
    "a a" '(emms-play-directory :which-key "Play playlist")
    "a s" '(emms-play-directory :which-key "Play/Pause")
    "a x" '(emms-stop :which-key "Stop")
    "a n" '(emms-next :which-key "Next track")
    "a p" '(emms-previous :which-key "Previous track")

    "s" '(vterm :which-key "Apri terminale")

    ;; Reload
    "r" '(:ignore t :which-key "Reload")
    "r r" '(config-reload :which-key "Reload")

    ;; Agenda
    "b"  '(:ignore t :which-key "Agenda")
    "b a" '(org-agenda :which-key "Agenda view")
    "b n" '(org-capture :which-key "Capture note")

    ;; Magit
    "g"  '(:ignore t :which-key "Git")
    "gg" #'((lambda () (interactive) (magit "~/config")) :which-key "Personal Config")
    "gG" #'((lambda () (interactive) (magit "~/nix-config")) :which-key "Nixos Config")
    "g." #'((lambda () (interactive) (magit "~/nix-config")) :which-key "Nixos Config")
    "g." '(magit :which-key "Open Magit in current directory")

    ;; Mail with NotMuch
    "o" '(:ignore t :which-key "Mail")
    "om" '(notmuch :which-key "Mail dashboard")
    "oc" '(notmuch-mua-new-mail :which-key "Compose mail"))

  (vb/ctrl-c-keys
    "a"   '(org-agenda-list :which-key "Open agenda")
    "! l"  '(consult-flymake :which-key "Show errors")
    "! r"  '(consult-ripgrep :which-key "Ripgrep")
    "! a"  '(embark-act :which-key "Embark Act"))

  (vb/ctrl-x-keys
    "b" '(consult-buffer :wich-key "Show buffers")
    "C-b" '(consult-buffer :wich-key "Show buffers")
    )

  ;; All-mode keymaps [Ovverride normal behaviour]
  (general-def
    :keymaps 'override

    ;; Global keybindings
    "<f12>" 'revert-buffer ;; Try out -> (revert-buffer :ignore-auto :noconfirm)
    "<XF86Favorites>" 'revert-buffer
    "<XF86AudioRaiseVolume>" 'revert-buffer
    "<Favorites>" 'revert-buffer

    ;; Remapping global keybindings
    "C-M-k" #'(lambda () (interactive)
                (mapc 'kill-buffer (buffer-list))
                (cd "~/")
                (message "All buffers closed"))
    "C-x C-s" #'(lambda () (interactive) (save-some-buffers t))
    "C-c RET" #'(lambda () (interactive) (if (eq major-mode 'org-mode) (org-open-at-point) (browse-url-at-point)))

    ;;"<escape>" 'keyboard-escape-quit

    "M-[" 'previous-buffer
    "M-]" 'next-buffer
    "M-m" 'menu-bar-mode ; Opens the menu with M-m, very KDE-ish
    "C-x C-k" '(dirvish-side :which-key "Treemacs view")))
(provide 'init-keybindings)
#+end_src
** Emacs goes [[https://github.com/emacs-evil/evil][evil]]
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-evil.el")
;;; init-evil.el --- Evil mode -*- lexical-binding: t -*-

;;; Commentary:

;;; Code:
;; (setq-default evil-want-keybinding nil)
(setup (:pkg evil)
  (:require evil)
  ;; (:with-after evil
  ;;   (:pkg evil-collection)
  ;;   (evil-collection-init))
  (:option evil-want-integration t    ;; This is optional since it's already set to t by default.
           ;; evil-want-keybinding nil
           evil-emacs-state-modes nil
           evil-want-fine-undo t)  ;; By default while in insert all changes are one big blob. Be more granular
  (evil-mode 1)
  (setup (:if-feature general)
    (general-def
      :states '(normal)
      ;; Remapping normal state keybindings
      ;; vim vinigar style
      "-" #'(lambda () (interactive) (dired "."))
      "#" 'comment-line
      "C-S-J" #'evil-window-move-very-bottom
      "C-S-K" #'evil-window-move-very-top
      "C-S-H" #'evil-window-move-far-right
      "C-S-L" #'evil-window-move-far-left
      ;; Taken from https://github.com/minad/consult/issues/318
      "n" #'(lambda () (interactive) (search-forward (car consult--line-history)))
      "N" #'(lambda () (interactive) (search-backward (car consult--line-history)))
      ;; "<left>" 'vb/dont-arrow-me-bro
      ;; "<right>" 'vb/dont-arrow-me-bro
      ;; "<up>" 'vb/dont-arrow-me-bro
      ;; "<down>" 'vb/dont-arrow-me-bro

      "(" 'evil-previous-open-paren
      ")" 'evil-next-close-paren)))
(provide 'init-evil)
;;; init-evil.el ends here
#+end_src
** Editing enhancement
Tweaks present here:
- Scroll (and smooth scroll for Emacs >= 29) and horizontal scroll with mouse;
- Truncate lines hook for =prog-mode=;
- Electric-pair mode and show-paren;
- Autorevert files after changes;
- Rainbow-mode;
- Delete-selection mode to overwrite selected regions;
- Drag-stuff to...drag stuff around;
- etc.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-editing.el")
;;; init-editing.el --- Basic editing configuration -*- lexical-binding: t -*-

;;; Commentary:

;; This file is pretty simple, it only contains editing related utilities and preferences.
;; It's still experimental and very poor, so I only consider it a starting point.

;;; Code:

;;
;;; General

;; Force UTF-8
(setup encoding
  (setq coding-system-for-read 'utf-8-unix)
  (setq coding-system-for-write 'utf-8-unix)
  (setq default-process-coding-system '(utf-8-unix utf-8-unix))
  (setq locale-coding-system 'utf-8-unix)
  (setq selection-coding-system 'utf-8)
  (setq x-select-request-type nil)
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8-unix))


;;; Keep history and keep the order
(setup backup
  (:option auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save/" .var)))
           backup-directory-alist `(("." . ,(expand-file-name "backups/" .var)))
           backup-by-copying t
           version-control t
           delete-old-versions t
           kept-new-versions 5
           kept-old-versions 2
           create-lockfiles nil
           auto-save-include-big-deletions t))

;;; Lines related

(setup display-line-numbers
  ;; Defaults
  (setq-default display-line-numbers-widen t)
  (setq-default display-line-numbers-width 3)

  ;; Preferences
  (:option display-line-numbers-type 'relative
           display-line-numbers-width-start nil
           display-line-numbers-grow-only t)

  ;; Hooks
  (:with-hook (prog-mode-hook text-mode-hook conf-mode-hook)
    (:hook (lambda () (display-line-numbers-mode 1))))
  (:with-hook (dired-mode-hook org-agenda-mode-hook pdf-view-mode-hook)
    (:hook (lambda () (display-line-numbers-mode 0)))))

;;
;;; Scrolling
(setup scrolling
  ;; Enable smooth scroll on Emacs 29
  (unless (version< emacs-version "29")
    (pixel-scroll-precision-mode 1))

  ;; Vertical scroll
  (setq scroll-step 1
        scroll-margin 10
        ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
        ;; for tall lines.
        auto-window-vscroll nil)

  ;; Horizontal scroll
  (setq hscroll-margin 16
        hscroll-step 1
        auto-hscroll-mode t)

  ;; General tweaks

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Emacs spends too much effort recentering the screen if you scroll the
  ;; cursor more than N lines past window edges (where N is the settings of
  ;; `scroll-conservatively'). This is especially slow in larger files
  ;; during large-scale scrolling commands. If kept over 100, the window is
  ;; never automatically re-centered.
  (setq scroll-conservatively 101
        scroll-preserve-screen-position t
        scroll-preserve-screen-position t))

(setup mouse
  ;; Movement related
  (setq focus-follows-mouse nil
        make-pointer-invisible t
        mouse-autoselect-window nil)

  ;; Scroll
  (setq mouse-wheel-scroll-amount '(3 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 2)

  ;; Behavior
  (setq mouse-wheel-follow-mouse t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-1-click-follows-link t)
  (setq mouse-yank-at-point t)

  (:global "<mouse-2>" clipboard-yank))

(setup elec-pair
  (electric-pair-mode 1))

(setup paren
  (:option show-paren-style 'parenthesis
           show-paren-when-point-in-periphery t
           show-paren-when-point-inside-paren nil)
  (show-paren-mode 1))

(setup selection
  (:option save-interprogram-paste-before-kill t
           kill-do-not-save-duplicates t
           kill-whole-line t
           select-enable-clipboard t
           select-enable-primary nil))

(setup (:pkg goto-last-change)
  (:global "C-z" goto-last-change))

(setup (:require autorevert)
  (:hide-mode auto-revert)
  (:option auto-revert-verbose t
           global-auto-revert-non-file-buffers t)
  (:with-hook after-init-hook
    (:hook global-auto-revert-mode)))

(setup (:pkg diff-hl)
  (:hook-into prog-mode)

  (:with-mode dired-mode
    (:hook diff-hl-dired-mode))

  (:with-after magit
    (:with-hook magit-pre-refresh-hook
      (:hook diff-hl-magit-pre-refresh))
    (:with-hook magit-post-refresh-hook
      (:hook diff-hl-magit-post-refresh))))

(setup long-lines
  (set-display-table-slot standard-display-table 'truncation (make-glyph-code ?…))
  (set-display-table-slot standard-display-table 'wrap (make-glyph-code ?↩)))

(provide 'init-editing)
;;; init-editing.el ends here
#+end_src
** Windows navigation
Moving around windows can be painful, but some built-in functions save our a*s.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-windows.el")
;;; init-windows.el --- Windows navigation configuration -*- lexical-binding: t -*-

;;; Commentary:

;; Only movement between buffers/frames, nothing special.

;;; Code:

(defvar vb/window-configuration nil
  "Current window configuration.  Used by `my/monocle-mode.")

(define-minor-mode vb/monocle-mode
  "Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'."
  :lighter " [M]"
  :global nil
  (let ((win vb/window-configuration))
    (if (one-window-p)
        (when win
          (set-window-configuration win))
      (setq vb/window-configuration (current-window-configuration))
      (when (window-parameter nil 'window-slot)
        (let ((buf (current-buffer)))
          (other-window 1)
          (switch-to-buffer buf)))
      (delete-other-windows))))
(setup windmove
  ;; Windmove with shift+arrows
  (windmove-default-keybindings)
  (add-hook 'org-shiftup-final-hook    #'windmove-up)
  (add-hook 'org-shiftdown-final-hook  #'windmove-down)
  (add-hook 'org-shiftleft-final-hook  #'windmove-left)
  (add-hook 'org-shiftright-final-hook #'windmove-right))

(setup window
  (setq window-resize-pixelwise nil
        help-window-select t)

  ;; Splitting around
  (setq split-width-threshold 125 ;; 125
        split-height-threshold 0)

  ;; Dividers
  (setq window-divider-default-right-width 6)
  (setq window-divider-default-places 'right-only)
  (window-divider-mode 0)

  (:global "C-x <up>"   enlarge-window
           "C-x <down>" shrink-window
           "C-x {"      shrink-window-horizontally
           "C-x }"      enlarge-window-horizontally)
  ;; Additional keymaps using <SPC> prefix
  (setup (:if-feature general)
    (vb/leader-key

      ;; Monocle layout
      "f" '(vb/monocle-mode :which-key "Toogle full screen on current buffer")

      "x" '(delete-other-windows :which-key "Unfocus other window")
      "X" '(delete-window :which-key "Unfocus current window")
      "v" '((lambda () (interactive) (split-window-right) (balance-windows) (other-window 1))
            :which-key "Vertical split")
      "h" '((lambda () (interactive) (split-window-below) (balance-windows) (other-window 1))
            :which-key "Vertical split")
      "<" '(shrink-window-horizontally :which-key "Shrink window width")
      ">" '(enlarge-window-horizontally :which-key "Expand window width")
      "+" '(enlarge-window :which-key "Expand window height")
      "-" '(shrink-window :which-key "Shrink window height"))))

(setup (:pkg beframe)
  (:option beframe-functions-in-frames '(project-prompt-project-dir)
           beframe-global-buffers '("*scratch*"
                				            "*Messages"
                				            "*Async-native-compile-log*"
                				            "*straight-byte-compilation*"
                				            "*straight-process*"
                				            "*dashboard*"))

  (:with-after consult
    (defface beframe-buffer
      '((t :inherit font-lock-string-face))
      "Face for `consult' framed buffers.")

    (defvar beframe--consult-source
      `( :name     "Frame-specific buffers (current frame)"
         :narrow   ?F
         :category buffer
         :face     beframe-buffer
         :history  beframe-history
         :items    ,#'beframe-buffer-names
         :action   ,#'switch-to-buffer
         :state    ,#'consult--buffer-state))

    (add-to-list 'consult-buffer-sources 'beframe--consult-source))

  (beframe-mode 1))
(provide 'init-windows)
#+end_src
** Buffer management
Sometimes buffers are too much, and I think that the classic buffer-menu is meh.
With =ibuffer= I can group buffers in ~Gnus~ style, customize actions remembering ~Dired~, and so on.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-buffers.el")
;;; init-buffers.el --- Buffer navigation -*- lexical-binding: t -*-

;;; Commentary:

;; Buffer navigation and management

;; This package makes it easier to find a script to edit in $PATH.  The initial
;; `rehash-exes' is slow, but it's stored in `*exes*' as a caching mechanism.
;; However, I'm sure it could be improved.

;; In addition, `*exes*' currently contains /all/ executables in $PATH, which
;; ... maybe only the ones stored in some text format should be shown.


;;; Code:
;;; Unique names for buffers
(setup (:require uniquify)
  (:option uniquify-buffer-name-style 'forward
           uniquify-strip-common-suffix t
           uniquify-after-kill-buffer-p t))

;; Additional keymaps using <SPC> prefix
(setup (:if-feature general)
  (vb/leader-key
    "z"  '(kill-this-buffer :which-key "Close current buffer")
    "k"  '(kill-matching-buffers :which-key "Kill buffers (Regex)")
    "RET" '(bookmark-jump :which-key "Bookmarks")))

(setup buffers
  (defun make-executable ()
    "Mark current file executable."
    (interactive)
    (set-file-modes (buffer-file-name (current-buffer)) #o700))

  (defun vb/move-file (new-location)
    "Write this file to NEW-LOCATION, and delete the old one."
    (interactive (list (if buffer-file-name
                           (read-file-name "Move file to: ")
                         (read-file-name "Move file to: "
                                         default-directory
                                         (expand-file-name (file-name-nondirectory (buffer-name))
                                                           default-directory)))))
    (when (file-exists-p new-location)
      (delete-file new-location))
    (let ((old-location (buffer-file-name)))
      (write-file new-location t)
      (when (and old-location
                 (file-exists-p new-location))
        (delete-file old-location))))
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "FNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name))))

  (defun move-buffer-file (dir)
    "Move both current buffer and file it's visiting to DIR."
    (interactive "DNew directory: ")
    (let* ((name (buffer-name))
           (filename (buffer-file-name))
           (dir
            (if (string-match dir "\\(?:/\\|\\\\)$")
                (substring dir 0 -1) dir))
           (newname (concat dir "/" name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (progn (copy-file filename newname 1)
               (delete-file filename)
               (set-visited-file-name newname)
               (set-buffer-modified-p nil)      t))))

  (defun delete-file-and-buffer ()
    "Deletes a buffer and the file it's visiting."
    (interactive)
    (when-let* ((file-name (buffer-file-name))
                (really (yes-or-no-p (format "Delete %s? "
                                             file-name))))
      (delete-file file-name)
      (kill-buffer)))

  (defun copy-file-name ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (if filename
          (progn
            (kill-new filename)
            (message "Copied '%s'" filename))
        (warn "Current buffer is not attached to a file!"))))

  (defun copy-buffer-path ()
    "Show and copy the full path to the current file in the minibuffer."
    (interactive)
    ;; list-buffers-directory is the variable set in dired buffers
    (if-let* ((path (or (buffer-file-name) list-buffers-directory)))
        (message (kill-new path))
      (error "Buffer not visiting a file"))))


(setup debug
  (:bind-into debugger-mode-map
    [remap evil-record-macro] 'top-level))

;; Regex for buffers
(defun vb/regex-kill-buffers (regexp)
  "Kill buffers matching REGEXP without asking for confirmation."
  (interactive)
  (cl-letf (((symbol-function 'yes-or-no-p) (lambda (_) t)))
    (kill-matching-buffers regexp)))

(defvar *exes* nil
  "All the exectuables in $PATH.
Run `rehash-exes' to refresh this variable.")

(defun rehash-exes ()
  "List all the executables in $PATH.
Also sets `*exes*' parameter."
  (setq *exes*
        (cl-loop for dir in exec-path
                 append (file-expand-wildcards (concat dir "*"))
                 into exes
                 finally return exes)))

;;;###autoload
(defun find-script (script)
  "Find a file in $PATH."
  (interactive
   (list (let ((exes (or *exes* (rehash-exes))))
           (completing-read "Script> " exes nil t))))
  (find-file script))

(provide 'init-buffers)
#+end_src
** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things. I currently use it as my primary file manager.

There's also a package named [[https://github.com/alexluigit/dirvish][dirvish]], a true work of art. It is:
+ Fast;
+ Unobtrusive;
+ Elegant;

It is all this, and it still is dired. It is exactly what a file manager in Emacs should be. I thought ranger was still lightyears ahead of dired, but dirvish has proved me wrong.

Dirvish solves these issues for me:
- It provides file copying/movement that is *both* multi-stage and asynchronous (unlike existing packages).  This is a game changer.
- Image preview is actually fast and usable.  I had stopped using all packages for image preview before because they didn't work well.  With dirvish, once an image is cached, it's as fast as any preview method that ranger has, and there is no flicker (unlike some ranger preview methods).  This is also a game changer.
- File preview in general works flawlessly out of the box and is customizable
- Dirvish is gorgeous, more so than ranger, but without sacrificing speed
  - The mode line is simple, customizable, and easy on the eyes
  - Icon display is fast/lazy unlike dired-all-the-icons, which is unusably slow
  - It can also replace the functionality of dired-k (very slow) and dired-git-info
  - I only had to customize one face to get it to look great with my theme
- It provides a 3-pane layout that just works (parent directory, current directory, preview).  I never used ranger.el's 3-pane layout, but I will use dirvish's.
- It provides various other helpful commands/features like bookmarks
- It is a minimal layer on top of dired and requires minimal configuration.  I had to make many more keybindings for ranger.el since it creates alternatives for a lot of existing dired commands, and I had a bunch of ugly configuration because it was comparably invasive (as both a dired user and as an evil user).

Dirvish replaces
- Replaces ranger.el (though not a ranger clone)
- Replaces dired-async, tmtxt-dired-async, dired-ranger, etc.
- Replaces dired-all-the-icons with a much more performant implementation
- Can replace dired-k, dired-git-info, and diff-hl-dired-mode (though my experience with diff-hl was much better than dired-k)

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-dired.el")
;;; init-dired.el --- Dired -*- lexical-binding: t -*-

;;; Commentary:

;; Dired utilities and configuration for a better experience.

;;; Code:
(setup dired
  ;; 'Kay, with this I'm good, maybe
  (defun vb/dired-open-file ()
    "In Dired, open the file named on this line through xdg-open."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))

  ;; Kill the current Dired buffer, then visit the file or directory
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Emacs 29 options
  (unless (version< emacs-version "29")
    (setopt dired-mouse-drag-files t
            dired-make-directory-clickable t
            mouse-drag-and-drop-region-cross-program t
            dired-free-space nil))

  ;; "-lAXhv --group-directories-first"
  (:option dired-listing-switches "-agho --group-directories-first"
           dired-clean-up-buffers-too t
           dired-omit-files "^\\.[^.].*"
           dired-recursive-copies 'always
           dired-recursive-deletes 'always
           dired-auto-revert-buffer t
           ;; Automatically revert Dired buffers after ‘dired-do’ operations
           dired-do-revert-buffer t
           ;; Whether Dired should create destination dirs when copying/removing files
           dired-create-destination-dirs 'ask
           dired-omit-verbose nil
           dired-kill-when-opening-new-dired-buffer t
           dired-auto-revert-buffer #'dired-directory-changed-p
           dired-dwim-target t
           dired-hide-details-hide-symlink-targets nil
           dired-clean-confirm-killing-deleted-buffers nil  ;; don't ask about killing buffer visiting file
           dired-deletion-confirmer 'y-or-n-p
           delete-by-moving-to-trash t)

  (:bind-into dired-jump-map
  	"j" dired-jump)

  (:bind-into dired-mode-map
    "C-<return>" alacritty
    "C-c C-e" wdired-change-to-wdired-mode
    "C-c C-c" dired-hide-details-mode)

  (:bind-into dired-mode-map
  	"M-<return>" vb/dired-open-file
  	"C-c o" vb/dired-open-file
  	"o" vb/dired-open-file)
  (setup (:if-feature general)
    (vb/leader-key "d" '(dired :which-key "File Manager")))
  (setup (:if-feature evil)
    (evil-define-key 'normal dired-mode-map
      (kbd "gr") 'revert-buffer
      (kbd "gg") 'evil-goto-first-line
      (kbd "G") 'evil-goto-line)))

;; (setup (:pkg all-the-icons-dired)
;;   (:option all-the-icons-dired-monochrome nil)
;;   (:with-after (all-the-icons dired)
;;     (:hook-into dired-mode-hook)))

(setup (:pkg dirvish)
  (:require dirvish)

  ;; Preview directory using exa command
  (dirvish-define-preview exa (file)
    "Use `exa' to generate directory preview."
    :require ("exa") ; tell Dirvish to check if we have the executable
    (when (file-directory-p file) ; we only interest in directories here
      `(shell . ("exa" "-al" "--color=always" "--icons"
                 "--group-directories-first" ,file))))
  (add-to-list 'dirvish-preview-dispatchers 'exa)

  (:option dirvish-attributes '(all-the-icons
                                file-time
                                file-size
                                collapse
                                subtree-state
                                vc-state
                                git-msg)
           dirvish-cache-dir (expand-file-name "dirvish/" .var)
           dirvish-reuse-session nil
           ;; specific height for the in single window and full-frame sessions
           dirvish-header-line-height '(25 . 35)
           dirvish-mode-line-height 25 ;; shorthand for '(25 . 25)

           ;; Appearance
           ;; Segments
           ;; 1. the order of segments *matters* here
           ;; 2. it's ok to place raw string inside
           dirvish-use-header-line 'global ;; Make header line span all panes
           dirvish-header-line-format
           '(:left (path) :right (free-space))
           dirvish-mode-line-format
           '(:left (sort file-time " " file-size symlink) :right (omit yank index))
           dirvish-mode-line-format '(:left (sort symlink) :right (omit yank index))
           ;;dirvish-path-separators (list " " "  " " ⋗ ")

           ) 
  (dirvish-override-dired-mode))

;; TODO: Handle using bind-into
(setup (:if-feature evil)
  (evil-define-key 'normal dirvish-mode-map
    (kbd "C-c f") #'dirvish-fd
    (kbd "a")     #'dirvish-quick-access
    (kbd ".")     #'dired-create-empty-file
    (kbd "f")     #'dirvish-file-info-menu
    (kbd "y")     #'dirvish-yank-menu
    (kbd "h")     #'dired-up-directory
    (kbd "l")     #'dired-find-file
    (kbd "s")     #'dirvish-quicksort ;; remapped `dired-sort-toggle-or-edit'
    (kbd "v")     #'dirvish-vc-menu ;; remapped `dired-view-file'
    (kbd "q")     #'dirvish-quit
    (kbd "L")     #'dirvish-history-go-forward
    (kbd "H")     #'dired-omit-mode
    (kbd "m")     #'dired-mark
    (kbd "M")     #'dirvish-mark-menu
    (kbd "o")     #'vb/dired-open-file
    (kbd "TAB")   #'dirvish-subtree-toggle

    (kbd "M-f")   #'dirvish-history-go-forward
    (kbd "M-b")   #'dirvish-history-go-backward
    (kbd "M-l")   #'dirvish-ls-switches-menu
    (kbd "M-t")   #'dirvish-layout-toggle
    (kbd "M-s")   #'dirvish-setup-menu
    (kbd "M-e")   #'dirvish-emerge-menu
    (kbd "M-j")   #'dirvish-fd-jump))

(provide 'init-dired)
;;; init-dired.el ends here
#+end_src
* Selection and search
This is one of my favourite parts. I think that fast selection, completing and search are a must, always, everywhere.
** Monster trio of completion
As Completion UI [[https://github.com/minad/vertico][Vertico]] is my preferred choice, it's lightweight and fast, and relies on Emacs internals. [[https://github.com/minad/marginalia/][Marginalia]] for rich annotations provides a summary for candidates.
Completion can be better with an [[https://github.com/oantolin/orderless][Orderless]] (similar to FZF, if you know). Orderless is also customizable for matching style.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-complete.el")
;;; init-complete.el --- Completion enhancement -*- lexical-binding: t -*-

;;; Commentary:

;; Emacs' internal completion is awesome, why should you use Ivy/Helm and similar?
;; They're wonderful, but complex and for me are unnecessary.
;; I'm using Vertico, Orderless and Marginalia (monster trio) for rich, orderless completion style.

;;; Code:

(setup minibuffer
  ;; Answers
  (fset #'yes-or-no-p #'y-or-n-p)
  (setq read-answer-short t)
  (setq use-short-answers t)

  ;; Files
  (setq file-name-shadow-properties '(invisible t intangible t))
  (file-name-shadow-mode 1)

  ;; Behavior
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  (minibuffer-electric-default-mode 1)

  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
            			 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
            			 crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  (:with-hook minibuffer-setup-hook
    (:hook cursor-intangible-mode)))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(setup (:require savehist)
  (setq savehist-file (expand-file-name "savehist" .var))
  (setq history-length 10000)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (:with-hook after-init-hook
    (:hook savehist-mode)))

;; Vertico
(setup (:pkg (vertico :files (:defaults "extensions/*")))

  (defun vb/minibuffer-backward-kill (arg)
    "Reset current content inside minibuffer with ARG."
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))
  ;; Automatic directory creation on find-file
  (defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
    "Create parent directory if not exists while visiting file."
    (unless (file-exists-p filename)
      (let ((dir (file-name-directory filename)))
        (unless (file-exists-p dir)
        	(make-directory dir t)))))

  (:also-load vertico-indexed
            	vertico-flat
            	vertico-grid
            	vertico-mouse
            	vertico-quick
            	vertico-buffer
            	vertico-repeat
            	vertico-reverse
            	vertico-directory
            	vertico-multiform
            	vertico-unobtrusive)

  (:option vertico-scroll-margin 0
           vertico-count 7
           vertico-resize "grow-only"
           vertico-cycle t)

  (:bind-into vertico-map
    "<escape>" #'keyboard-escape-quit
    "C-j"  #'vertico-next
    "C-k" #'vertico-previous
    "M-TAB" #'minibuffer-force-complete-and-exit
    "C-w" #'vb/minibuffer-backward-kill
    "<tab>" #'vertico-insert) ;; minibuffer-complete

  ;; Prefix the current candidate with “» ”. (From https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow)
  ;; This does add width to the left side of the minibuffer, which may interfere with your aesthetic-related configurations of other packages.
  (advice-add #'vertico--format-candidate :around
            	(lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
            			   (propertize "λ " 'face 'vertico-current)
            			 "  ")
                 cand)))

  ;; Sort directories before files
  (defun sort-directories-first (files)
    (setq files (vertico-sort-history-length-alpha files))
    (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
           (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))

  (:option vertico-multiform-commands
           '((dired (vertico-sort-function . sort-directories-first))))

  (:option vertico-multiform-categories
           '(
             ;; (consult-grep buffer)
             ;; (consult-ripgrep buffer)
             ;; (consult-git-grep buffer)
             ;; (consult-find buffer)
             (file (vertico-sort-function . sort-directories-first))))

  ;; This works with `file-name-shadow-mode'.  When you are in a
  ;; sub-directory and use, say, `find-file' to go to your home '~/' or
  ;; root '/' directory, Vertico will clear the old path to keep only
  ;; your current input.
  (:with-hook rfn-eshadow-update-overlay-hook
    (:hook vertico-directory-tidy))

  (:with-mode minibuffer-setup-hook
    (:hook vertico-repeat-save))

  ;; (vertico-multiform-mode 1)
  (vertico-mode 1))

(setup (:if-feature general)
  (vb/leader-key "." '(find-file :which-key "Open file")))

;; Marginalia
(setup (:pkg marginalia)
  (:load-after vertico)
  (:bind-into minibuffer-local-map
    "M-A" marginalia-cycle)
  (:option
   marginalia-max-relative-age  0
   marginalia-align  'right
   marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode 1))

;; Note: All-the-icons-completion depends on an already installed all-the-icons.
(setup (:pkg all-the-icons-completion)
  (:with-after (all-the-icons marginalia)
    (all-the-icons-completion-mode 1)
    (:with-mode marginalia-mode
      (:hook all-the-icons-completion-marginalia-setup))))

;; Orderless
(setup (:pkg orderless)
  (defun archer-orderless-literal-dispatcher (pattern _index _total)
    "Literal style dispatcher, using equal sign as a suffix."
    (cond
     ((equal "=" pattern)
      '(orderless-literal . "="))
     ((string-suffix-p "=" pattern)
      (cons 'orderless-literal (substring pattern 0 -1)))))

  (defun archer-orderless-without-literal-dispatcher (pattern _index _total)
    "Literal without style dispatcher using the exclamation mark as a suffix."
    (cond
     ((equal "!" pattern)
      '(orderless-literal . "!"))
     ((string-suffix-p "!" pattern)
      (cons 'orderless-without-literal (substring pattern 0 -1)))))

  (defun archer-orderless-initialism-dispatcher (pattern _index _total)
    "Leading initialism dispatcher using comma as suffix."
    (cond
     ((equal "," pattern)
      '(orderless-literal . ","))
     ((string-suffix-p "," pattern)
      (cons 'orderless-initialism (substring pattern 0 -1)))))

  (defun archer-orderless-flex-dispatcher (pattern _index _total)
    "Flex dispatcher using the tilde suffix."
    (cond
     ((equal "~" pattern)
      '(orderless-literal . "~"))
     ((string-suffix-p "~" pattern)
      (cons 'orderless-flex (substring pattern 0 -1)))))

  (:option completion-styles '(orderless basic)
           orderless-component-separator 'orderless-escapable-split-on-space
           completion-category-defaults nil)

  (:option orderless-style-dispatchers
           '(archer-orderless-literal-dispatcher
             archer-orderless-without-literal-dispatcher
             archer-orderless-initialism-dispatcher
             archer-orderless-flex-dispatcher))

  (:option completion-category-overrides
           '((file (styles . (partial-completion basic orderless)))
             (project-file (styles . (partial-completion basic orderless))))))

(provide 'init-complete)
;;; init-complete.el ends here
#+end_src
** Embark
[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context, exactly like a contextual menu.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-embark.el")
;;; init-embark.el --- Embark, run a command based on point-*- lexical-binding: t -*-

;;; Commentary:

;; Sometimes you want to act near point, but there are many actions.
;; Embark ships many actions, dependant on target and modes.

;;; Code:

(defun vb/embark-which-key-indicator ()
  "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
  (lambda (&optional keymap targets prefix)
    (if (null keymap)
        (which-key--hide-popup-ignore-command)
      (which-key--show-keymap
       (if (eq (plist-get (car targets) :type) 'embark-become)
           "Become"
         (format "Act on %s '%s'%s"
                 (plist-get (car targets) :type)
                 (embark--truncate-target (plist-get (car targets) :target))
                 (if (cdr targets) "…" "")))
       (if prefix
           (pcase (lookup-key keymap prefix 'accept-default)
             ((and (pred keymapp) km) km)
             (_ (key-binding prefix 'accept-default)))
         keymap)
       nil nil t (lambda (binding)
                   (not (string-suffix-p "-argument" (cdr binding))))))))

(setq embark-indicators
      '(vb/embark-which-key-indicator
        embark-highlight-indicator
        embark-isearch-highlight-indicator))

(defun archer-embark-hide-which-key-indicator (fn &rest args)
  "Hide the which-key indicator immediately when using the completing-read prompter."
  (which-key--hide-popup-ignore-command)
  (let ((embark-indicators
         (remq #'archer-embark-which-key-indicator embark-indicators)))
    (apply fn args)))

;; Embark configuration
(setup (:pkg embark)
  (:with-after consult
    (:pkg embark-consult))

  (:with-after which-key
    (setq prefix-help-command #'embark-prefix-help-command)
    (advice-add #'embark-completing-read-prompter :around #'archer-embark-hide-which-key-indicator))

  (:global "C-." embark-act
           "C-;" embark-dwim
           "C-h B" embark-bindings) ;; alternative for `describe-bindings'

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Used for export and edit after ripgrep magic.
(setup (:pkg wgrep))

(provide 'init-embark)
;;; init-embark.el ends here
#+end_src
*** Useful guides
+ [[https://lambdaland.org/posts/2023-05-31_warp_factor_refactor/][Warp Factor Refactoring in Emacs]]
   - ~consult-ripgrep~, ~embark-act~, ~embark-export~ (E)
** Consult
[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read.
Consult offers, for example:
- Buffer switching command =consult-buffer= to switch between buffers and recently opened files.
- Multiple asynchronous search commands:
  - =consult-grep=
  - =consult-ripgrep=
  - =consult-line=, which resembles [[https://github.com/abo-abo/swiper][Swiper]]
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-consult.el")
;;; init-consult.el --- Consult completing read -*- lexical-binding: t -*-

;;; Commentary:

;; Consult provides commands based on Emacs `completion-read' functionality.  Here my basic configuration and key-bindings.  Totally WIP.

;;; Code:

(setup (:pkg consult)
  (:require consult)

  ;; C-c bindings (mode specific)
  (:global "C-c h" consult-history
           "C-c M" consult-mode-command
           "C-c b" consult-bookmark
           "C-c k" consult-kmacro
           "C-c C-a" consult-org-agenda)

  ;; C-x bindings
  (:global "C-x M-c" consult-complex-command      ; orig. repeat-complex-command
           "C-x C-b" consult-buffer               ; orig. switch-to-buffer
           "C-x 4 b" consult-buffer-other-window  ; orig. switch-to-buffer-other-window
           "C-x 5 b" consult-buffer-other-frame)  ; orig. switch-to-buffer-other-frame

  ;; [C]-[M]-# bindings for registers
  (:global "C-M-#" consult-register
           "M-#"   consult-register-load
           "C-#"   consult-register-store) ; orig. abbrev-prefix-mark (unrelated)

  ;; Other custom bindings
  (:global "M-y"   consult-yank-pop  ; orig. yank-po
           "C-h a" consult-apropos   ; orig. apropos-comman
           "C-s" consult-line)

  ;; M-g bindings (goto-map)
  (:bind-into goto-map
    "g"   consult-goto-line     ; orig. goto-line
    "o"   consult-org-heading   ;; Alternative: consult-outline
    "m"   consult-mark
    "k"   consult-global-mark
    "i"   consult-imenu
    "I"   consult-imenu-multi
    "e"   consult-compile-error
    "f"   consult-flymake)

  ;; M-s bindings (search-map)
  (:bind-into search-map
    "f" consult-find
    "F" consult-locate
    "g" consult-grep
    "G" consult-git-grep
    "r" consult-ripgrep
    "l" consult-line
    "L" consult-line-multi
    "m" consult-multi-occur
    "k" consult-keep-lines
    "u" consult-focus-lines
    "e" consult-isearch-history)  ; Isearch integration

  ;; ??? From wiki
  ;; (:bind-into isearch-mode-map
  ;;   "M-e" consult-isearch-history       ; orig. isearch-edit-string
  ;;   "M-s e" consult-isearch-history     ; orig. isearch-edit-string
  ;;   "M-s l" consult-line                ; needed by consult-line to detect isearch
  ;;   "M-s L" consult-line-multi)         ; needed by consult-line to detect isearch

  ;; Register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (:option register-preview-delay 0
           register-preview-function #'consult-register-format)

  ;; Optionally configure the narrowing key.
  (:option consult-narrow-key "<")

  ;; Use Consult to select xref locations with preview
  (:option xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref)

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any))

  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file
   consult--source-bookmark :preview-key "M-.")

  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI. You may want to also
  ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
  (:with-mode completion-list-mode
    (:hook consult-preview-at-point-mode))
  (setup (:if-feature general)
    (vb/leader-key
      "SPC" '(consult-buffer :which-key "File Manager")
      "C-SPC" '(consult-buffer :which-key "File Manager"))))


;; Previewing files in find-file  `find-file'
;; (setq read-file-name-function #'consult-find-file-with-preview)

;; (defun consult-find-file-with-preview (prompt &optional dir default mustmatch initial pred)
;;   (interactive)
;;   (let ((default-directory (or dir default-directory))
;;         (minibuffer-completing-file-name t))
;;     (consult--read #'read-file-name-internal :state (consult--file-preview)
;;                    :prompt prompt
;;                    :initial initial
;;                    :require-match mustmatch
;;                    :predicate pred)))

(setup (:pkg consult-dir)
  (:with-after consult
    (:global "C-x C-d" consult-dir)
    (:bind-into minibuffer-local-completion-map
      "C-x C-d" consult-dir-maybe
      "C-x C-j" consult-dir-jump-file)))

(provide 'init-consult)
;;; init-consult.el ends here
#+end_src
** Completion at point
I'm using [[https://github.com/minad/corfu][Corfu]] with [[https://github.com/minad/cape][Cape]] right now, while [[https://github.com/company-mode/company-mode][Company]] stuff is here due to other modes completion backends which relies on it. I prefer Corfu especially because it uses Emacs completion facilities, and child frames instead of overlays.
Completions are provided by commands which provide completion, or by Capfs (=completion-at-point-functions=). Many major modes implement a Capf, also LSP clients which talk to the LSP server to retrieve completion.
Cape provides extensions and backends. A great thing of Cape is the =cape-company-to-capf= adapter for Company backends, and it is very easy to use!

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-complete-in-buffer.el")
;;; init-complete-in-buffer.el --- In buffer completion configuration -*- lexical-binding: t -*-

;;; Commentary:

;; Corfu completion UI and Cape extensions for better completion at point.

;;; Code:

(setup (:pkg (corfu :files (:defaults "extensions/*")))
  (:option corfu-cycle t
           corfu-auto t
           corfu-auto-delay 0.3
           corfu-auto-prefix 3
           corfu-separator ?\s
           corfu-quit-at-boundary 'separator
           corfu-quit-no-match 'separator
           corfu-preview-current #'insert
           corfu-preselect-first t
           corfu-preselect 'valid
           corfu-on-exact-match #'insert
           corfu-echo-documentation 0.25
           corfu-min-width 30
           corfu-scroll-margin 5)

  (:bind-into corfu-map
		"C-n"      corfu-next
		[tab]      corfu-next
		"C-p"      corfu-previous
		[backtab]  corfu-previous
		"<escape>" corfu-quit
		"<return>" corfu-insert
		"M-SPC"    corfu-insert-separator)

  ;; Cute extras
  (defun contrib-corfu-beginning-of-prompt ()
	  "Move to beginning of completion input."
	  (interactive)
	  (corfu--goto -1)
	  (goto-char (car completion-in-region--data)))

  (defun contrib-corfu-end-of-prompt ()
	  "Move to end of completion input."
	  (interactive)
	  (corfu--goto -1)
	  (goto-char (cadr completion-in-region--data)))

  (defun contrib-corfu-move-to-minibuffer ()
	  (interactive)
	  (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
	    (apply #'consult-completion-in-region completion-in-region--data)))

  (:bind-into corfu-map
		[remap move-beginning-of-line] #'corfu-beginning-of-prompt
		[remap move-end-of-line] #'corfu-end-of-prompt
    ;; Corfu completion is way better than the evil one
    [remap evil-complete-next] #'corfu-next
    [remap evil-complete-previous] #'corfu-previous

		"M-m" contrib-corfu-move-to-minibuffer)

  ;; Found in Prot's configuration
  (defun contrib-corfu-enable-always-in-minibuffer ()
	  "Enable Corfu in the minibuffer if Vertico is not active.
Useful for prompts such as `eval-expression' and `shell-command'."
	  (unless (or (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
	    (setq-local corfu-auto nil) ;; Enable/disable auto completion
	    (setq-local corfu-popupinfo-delay nil)
	    (corfu-mode 1)))

  (:with-hook minibuffer-setup-hook
		(:hook contrib-corfu-enable-always-in-minibuffer))

  (global-corfu-mode))

(setup corfu-history
  (:pkg (corfu :files (:defaults "extensions/*")
               :includes (corfu-history)))
  (:load-after corfu savehist)
  (:autoload corfu-history-mode)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  (corfu-history-mode 1))

(setup corfu-popupinfo
  (:pkg (corfu :files (:defaults "extensions/*")
               :includes (corfu-popupinfo)))
  (:load-after corfu)
  (:autoload corfu-popupinfo-mode)
  (:option corfu-popupinfo-delay '(0.5 . 0))
  (corfu-popupinfo-mode 1)
  (:bind-into corfu-popupinfo-map
    "M-p" corfu-popupinfo-scroll-down
    "M-n" corfu-popupinfo-scroll-up
    "M-d" corfu-popupinfo-toggle))

(setup (:pkg kind-icon)
  (:with-after corfu
    (:option kind-icon-default-face 'corfu-default
             kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.7 :scale 1.0))
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

(setup (:pkg cape)
  ;; Needed for company-backends!
  (setup (:pkg company)
    (:autoload company-grab))
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  ;; (dolist (backend '(cape-keyword cape-file cape-history cape-dabbrev))
  (dolist (backend '(cape-dabbrev cape-keyword cape-file cape-history))
    (add-to-list 'completion-at-point-functions backend))

  (:global "C-c p p" completion-at-point
           "C-c p t" complete-tag
           "C-c p d" cape-dabbrev
           "C-c p h" cape-history
           "C-c p f" cape-file
           "C-c p k" cape-keyword
           "C-c p s" cape-elisp-symbol
           "C-c p a" cape-abbrev
           "C-c p i" cape-ispell
           "C-c p l" cape-line
           "C-c p w" cape-dict
           "C-c p \\" cape-tex
           "C-c p _" cape-tex
           "C-c p ^" cape-tex
           "C-c p &" cape-sgml
           "C-c p r" cape-rfc1345))

(provide 'init-complete-in-buffer)
;;; init-complete-in-buffer.el ends here
#+end_src
* Org Mode
#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
--- Carsten Dominik
#+END_QUOTE

Org mode is the killer feature of Emacs. Markup language, agenda, brain, templates...you can do /literally/ (xD) everything.
** Essential configuration
I absolutely need focus when I'm editing my documents in the dark, so I want my buffer centered and lines untruncated.
Indentation is defined as a function for basic org-mode setup.
[[https://github.com/minad/org-modern][Org Modern]] replaces markup syntax with nice headings, TODOs etc.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-org.el")
;;; init-org.el --- Org mode configuration -*- lexical-binding: t -*-

;;; Commentary:

;; Org mode is certainly the killer feature of Emacs.
;; You can do anything, for example capturing of templates, export, markdown like editing.

;;; Code:

(defun vb/org-mode-setup ()
  "Set important modes for me while editing org documents.

- Setting variable-pitch allows different face definition;
- I prefer visual-line here, instead of truncating lines."
  (variable-pitch-mode 1)
  (visual-line-mode 1))


(setup (:pkg org :type built-in)
  (setq load-path
        (cl-remove-if (lambda (path) (string-match-p "lisp/org\\'" path)) load-path))
  ;; General
  (:option org-adapt-indentation nil
           org-fold-catch-invisible-edits 'smart
           org-cycle-separator-lines 0 ;; Give a more compact and consistent view

           org-directory "~/Dropbox/org/"
           org-auto-align-tags nil
           ;; It's convenient to have properties inherited
           org-use-property-inheritance t
           org-return-follows-link t           ;; make RET follow links
           org-tags-column 0 ;; place tags directly next to headline text
           org-archive-mark-done nil
           org-startup-folded 'content
           org-insert-heading-respect-content t
           org-read-date-prefer-future 'time
           org-startup-folded t
           org-startup-indented t

           ;; Prettify
	         org-ellipsis " ▾"             ;; "…" " ⤵"  " " " " "⤶" " "
           org-hide-leading-stars nil
           org-pretty-entities t
           org-pretty-entities-include-sub-superscripts t
           org-hide-emphasis-markers t
           org-fontify-quote-and-verse-blocks t
           org-list-allow-alphabetical t
           org-highlight-latex-and-related '(native latex)
           org-image-actual-width 500

           ;; Date
           org-display-custom-times t
           org-time-stamp-custom-formats '("<%d %b %Y>" . "<%d/%m/%y %a %H:%M>")

           ;; Footnotes
           org-footnote-section nil ;; place footnotes locally rather than in its own section
           org-footnote-auto-adjust t ;; renumber footnotes

           ;; Insertion/Yanking
           org-M-RET-may-split-line '((default . t)) ;; don't split line when creating a new headline, list item, or table field
           org-yank-adjusted-subtrees t ;; adjust subtrees to depth when yanked
           org-yank-folded-subtrees t                ;; fold subtrees on yank

           org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+"))
           org-list-indent-offset 1 ;; increase sub-item indentation

           ;; Movement
           org-return-follows-link t ;; make RET follow links
           org-special-ctrl-a/e t    ;; better movement in headers

           ;; Searching
           org-imenu-depth 8   ;; scan to depth 8 w/imenu
           imenu-auto-rescan t ;; make sure imenu refreshes

           ;; Source block settings
           org-src-fontify-natively t         ;; use lang-specific fontification
           org-src-window-setup 'other-window ;; edit source in other window
           org-src-tab-acts-natively t        ;; use lang bindings
           org-confirm-babel-evaluate nil       ;; no confirm evaluation

		       ;; Agenda
		       org-agenda-files `(,"~/Dropbox/org/Agenda.org")
		       org-log-done 'time                  ;; Having the time a item is done sounds convenient
		       org-agenda-restore-windows-after-quit t
		       org-agenda-skip-unavailable-files t ;; just skip non-reachable files in org-agenda-files

		       ;; Taken from https://emacs.stackexchange.com/questions/12517/how-do-i-make-the-timespan-shown-by-org-agenda-start-yesterday
		       org-agenda-span 7
		       org-agenda-start-on-weekday nil
		       org-agenda-compact-blocks t ;; Make agenda shorter
		       org-agenda-skip-deadline-if-done t
		       org-agenda-skip-scheduled-if-done t
		       org-agenda-skip-archived-trees nil
		       org-agenda-include-deadlines t
		       org-agenda-dim-blocked-tasks t
		       org-agenda-inhibit-startup t ;; ~50x speedup
		       org-agenda-current-time-string "← now ─────────────────────────────────────────────────" ;; "ᐊ---------- now"
		       org-agenda-window-frame-fractions '(0.3 . 0.4) ; define min and max height for org-agenda buffers

           ;; Refile
           org-refile-targets '(("Archived.org" :maxlevel . 2))

           ;; Agenda tags
           org-tag-alist '(("@Anime"    . ?A)
                           ("@Emacs"    . ?E)
                           ("@Nixos"    . ?A)
                           ("@Movies"   . ?M)
                           ("@Personal" . ?P)
                           ("@Work"     . ?W)
                           ("@TVSeries" . ?T)
                           ("@Uni"      . ?W))

           ;; Configure custom agenda views
           ;; TODO:  Try out this symbols          ⭐
           org-agenda-custom-commands

           '(("A" "Anime"
              tags-todo "@Anime"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header "⚡ Anime")))

             ("E" "Emacs"
              tags-todo "@Emacs"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header " Emacs")))

             ("N" "Nixos"
              tags-todo "@Nixos"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header " Nixos")))

             ("M" "Movies"
              tags-todo "@Movies"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header " Movies")))

             ("P" "Personale"
              tags-todo "@Personal"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header " Personale")))

             ("W" "Work"
              tags-todo "@Work"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header " Work")))

             ("T" "TVSeries"
              tags-todo "@TVSeries"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header "  Serie TV")))

             ("U" "Uni"
              tags-todo "@Uni"
              ((org-agenda-files '("~/Dropbox/org/Agenda.org"))
               (org-agenda-overriding-header "  Uni"))))
           org-capture-templates
           '(("A" "Anime" entry (file+headline "~/Dropbox/org/Agenda.org" "Anime")
              "* TODO %? :@Anime:\n%U" :empty-lines 0)
             ("D" "Deadline" entry (file+headline "~/Dropbox/org/Agenda.org" "DEADLINE")
              "* TODO %? %^G \n  DEADLINE: %^T" :empty-lines 0)
             ("E" "Emacs" entry (file+headline "~/Dropbox/org/Agenda.org" "Emacs")
              "* TODO %? :@Emacs:\n%U" :empty-lines 0)
             ("N" "NIXOS" entry (file+headline "~/Dropbox/org/Agenda.org" "Nixos")
              "* TODO %? :@Nixos:\n%U" :empty-lines 0)
             ("M" "MOVIES" entry (file+headline "~/Dropbox/org/Agenda.org" "Movies")
              "* TODO %? :@Movies:\n%U" :empty-lines 0)
             ("P" "Personal" entry (file+headline "~/Dropbox/org/Agenda.org" "Personale")
              "* TODO %? :@Personal:\n%U" :empty-lines 0)

             ("T" "Serie TV" entry (file+headline "~/Dropbox/org/Agenda.org" "Serie TV")
              "* TODO %? :@TVSeries:\n%U" :empty-lines 0)
             ("U" "Uni" entry (file+headline "~/Dropbox/org/Agenda.org" "Uni")
              "* TODO %? :@Uni:\n%U" :empty-lines 0)
             ("W" "Work" entry (file+headline "~/Dropbox/org/Agenda.org" "Work")
              "* TODO %? :@Work:\n%U" :empty-lines 0)
             ("S" "Scheduled TODO" entry (file+headline "~/Dropbox/org/Agenda.org" "SCHEDULED")
              "* TODO %? %^G \nSCHEDULED: %^T\n  %U" :empty-lines 0))

           ;; TODOS
           org-use-fast-todo-selection 'expert ;; don't use popup window for todos
           ;; don't set to DONE if children aren’t DONE
           org-enforce-todo-dependencies t
           org-enforce-todo-checkbox-dependencies t

           ;; TODO customization
           org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                               (sequence "TODO [/] (T)" "READY(r)" "|" "COMPLETED(c)" "CANC(k@)"))

           ;; Source blocks
           org-hide-block-startup nil
           org-src-preserve-indentation nil
           org-edit-src-content-indentation 0)

  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (shell . t)
                               (groovy . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  (:local-set completion-at-point-functions '(cape-dabbrev cape-file))
  (:bind-into org-mode-map
    [tab] 'org-cycle
    [S-tab] 'org-shifttab
    "M-j" 'org-next-visible-heading
    "M-k" 'org-previous-visible-heading
    "M-h" 'org-promote-subtree
    "M-l" 'org-demote-subtree

    "C-j" 'org-move-subtree-down
    "C-k" 'org-move-subtree-up)

  (:hook vb/org-mode-setup))

(setup (:if-feature evil)
  (eval-after-load 'org-agenda
    '(progn
       (evil-set-initial-state 'org-agenda-mode 'normal)
       (evil-define-key 'normal org-agenda-mode-map
         (kbd "<RET>") 'org-agenda-switch-to
         (kbd "\t") 'org-agenda-goto
         "q" 'org-agenda-quit
         "r" 'org-agenda-redo
         "S" 'org-save-all-org-buffers
         "+" 'org-agenda-priority-up
         "," 'org-agenda-priority
         "-" 'org-agenda-priority-down
         "n" 'org-agenda-add-note
         "t" 'org-agenda-todo
         ":" 'org-agenda-set-tags
         ";" 'org-timer-set-timer
         "I" 'helm-org-task-file-headings
         "i" 'org-agenda-clock-in-avy
         "O" 'org-agenda-clock-out-avy
         "j"  'org-agenda-next-line
         "k"  'org-agenda-previous-line
         "o" 'delete-other-windows
         "gv" 'org-agenda-view-mode-dispatch
         "f" nil
         "c" 'helm-org-capture-templates
         "e" 'org-agenda-set-effort
         "n" nil
         "A" 'org-agenda-toggle-archive-tag
         "." 'org-agenda-goto-today
         "<" 'org-agenda-filter-by-category
         ">" 'org-agenda-date-prompt
         "F" 'org-agenda-follow-mode
         "D" 'org-agenda-deadline
         "J" 'org-agenda-next-date-line
         "K" 'org-agenda-previous-date-line
         "L" 'org-agenda-recenter
         "P" 'org-agenda-show-priority
         "R" 'org-agenda-clockreport-mode
         "T" 'org-agenda-show-tags
         "X" 'org-agenda-clock-cancel
         "]" 'org-agenda-manipulate-query-subtract))))

(setup (:pkg org-appear)
  (:autoload org-appear-mode)
  (:hook-into org-mode)
  (:option org-appear-autoemphasis t
           org-appear-autolinks t
           org-appear-autosubmarkers t))

;; Fontifying `org-mode' buffers to be as pretty as possible is of paramount importance, and Minad's lovely `org-modern' goes a long way in this regard.
(setup (:pkg org-modern)
  (:load-after org)
  (:hook-into org-mode)
  (set-face-attribute 'org-modern-symbol nil :family "Hack")
  (:option org-modern-label-border 1
           org-modern-list '((43 . "▶") (45 . "–") (42 . "•"))
           org-modern-hide-stars nil      ;; Compatibility with org-indent
           org-modern-block-fringe nil    ;; Bad
           org-modern-variable-pitch nil
           org-modern-timestamp t
           org-modern-table t
           org-modern-table-vertical 1
           org-modern-table-horizontal 0.2))

(setup (:pkg (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent"))
  (:hook-into org-indent-mode))

(provide 'init-org)
;;; init-org.el ends here
#+end_src
** Babel and Tempo
To execute or export code in =org-mode= code blocks, we need to set up =org-babel-load-languages= for each language. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.
Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
To add more =src= block templates, just copy one of the lines and change the two strings at the end, the first to be the template name and the second to contain the name of the language ([[https://orgmode.org/worg/org-contrib/babel/languages.html][listed here]]).
There's also a snippet that adds a hook to =org-mode= buffers so that ~archer-org-babel-tangle-config~ gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files. This function is inspired by David Wilson of System Crafters.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-org-languages.el")
;;; init-org-languages.el --- Language related org settings -*- lexical-binding: t -*-

;;; Commentary:

;; We can execute code in org-mode, but also define structure templates
;; to insert blocks (like src blocks).
;; Tangling is also an important feature, let's use it.

;;; Code:

(setup org-tempo
  (:with-after org
    (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("cc" . "src c"))
    (add-to-list 'org-structure-template-alist '("java" . "src java"))
    (add-to-list 'org-structure-template-alist '("conf" . "src conf"))

		(add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml")))

  (:with-mode org-mode
    (:local-set electric-pair-inhibit-predicate
                `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(setup ob-tangle
  ;; Auto tangling
  (defun archer-org-babel-tangle-config ()
    "Auto tangle configuration on save if we are in the right directory."
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name vb/config-path))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (:with-mode org-mode
    (:with-hook after-save-hook
      (:hook archer-org-babel-tangle-config))))

(provide 'init-org-languages)
;;; init-org-languages.el ends here
#+end_src
** Exporting
Org is surely nice, but what about export?
Wonderful, but it needs some tweaks, and not only for presentations.
The first section of this file is regards good LaTeX export through =ox-latex=.
The best way to set export options is [[https://jakebox.github.io/youtube/org_latex_video.html][the following]].
Structure every file like this:
#+begin_src org
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [letterpaper]
#+OPTIONS: toc:nil
#+end_src
Reveal.js presentations are exported through =ox-reveal=, which is very simple to configure.
The hidden gem is =ox-hugo=, you can manage your website content from Emacs, that's cool. You can also manage your contents with a single file, multiple files, or both ways!
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-org.el")
;;; init-org-export.el --- Org exports configuration -*- lexical-binding: t -*-

;;; Commentary:

;; We can export in any format with org-mode, but we need some
;; tweaks to achieve good results.
;; Here are listed all the settings for ox-latex, ox-reveal, etc.

;;; Code:

;; LaTeX export
(setup ox-latex
  (:load-after ox)
  (:option org-latex-toc-command "\\tableofcontents \\clearpage"  ; Newpage after TOC
           ;; Enable listings
           org-latex-listings t
           ;; Previewing LaTeX fragments in org mode, default changed for bad quality.
           org-latex-create-formula-image-program 'imagemagick
           ;; Using minted for tables
           org-latex-listings 'minted
           org-latex-packages-alist '(("" "minted"))
           org-latex-minted-options '(("breaklines" "true")
                                      ("breakanywhere" "true"))
           ;; PDF process
           ;; '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f")

		       org-latex-compiler "lualatex"
		       org-latex-pdf-process '("lualatex -shell-escape -interaction nonstopmode %f"
					                         "lualatex -shell-escape -interaction nonstopmode %f"))

  ;; (add-to-list 'org-latex-listings-langs '(yaml "yaml"))
  ;; (add-to-list 'org-latex-listings-langs '(groovy "groovy"))

  ;; LaTeX base classes
  (:when-loaded (add-to-list 'org-latex-classes
				                     '("org-plain-latex"
				                       "\\documentclass{article}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
				                       ("\\section{%s}" . "\\section*{%s}")
				                       ("\\subsection{%s}" . "\\subsection*{%s}")
				                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				                       ("\\paragraph{%s}" . "\\paragraph*{%s}")
				                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

;; Reveal.js
(setup (:pkg (ox-reveal :type git :host github :repo "yjwen/org-reveal"))
  (:load-after ox)
  (:option org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

;; Hugo
(setup (:pkg ox-hugo)
  (:load-after ox))

(provide 'init-org-export)
;;; init-org-export.el ends here
#+end_src
** Useful links
+ [[https://www.labri.fr/perso/nrougier/GTD/index.html][Get Things Done with Emacs]]
* Development
All my packages needed to develop in a decent way. Bye IDEs.
** Projects management and Git
[[https://github.com/bbatsov/projectile][Projectile]] provides easy project management and navigation.
Common Git operations are easy to execute quickly using _Magit_'s command panel system.
*NOTE*: Make sure to configure a GitHub token before using this package!
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting started with Magit]]
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-projects.el")
;;; init-projects.el --- Projects management -*- lexical-binding: t -*-

;;; Commentary:

;; Git integration and projects' folders management.

;;; Code:

(setup (:pkg envrc)
  (:needs "direnv")
  (:with-hook after-init-hook
    (:hook envrc-global-mode)))

(setup (:pkg magit)
  (:autoload magit-status)

  ;; Magit related functions
  (defun vb/exec-regex-kill-buffers-on-magit()
    "Kill magit buffers without asking for confirmation."
    (interactive)
    (vb/regex-kill-buffers "magit"))

  (:option magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
           ;; Suppress the message we get about "Turning on magit-auto-revert-mode" when loading Magit.
           magit-no-message '("Turning on magit-auto-revert-mode...")

           ;; Don't try to save unsaved buffers when using Magit. We know
           ;; perfectly well that we need to save our buffers if we want Magit
           ;; to see them.
           magit-save-repository-buffers nil
           git-commit-summary-max-length 100)
  (:bind-into magit-status-mode-map
    "j" 'evil-next-line
    "k" 'evil-previous-line
    "Q" #'(lambda () (interactive) (vb/regex-kill-buffers "magit"))
    [remap evil-execute-last-recorded-macro] #'(lambda () (interactive) (vb/regex-kill-buffers "magit"))
    [remap evil-record-macro] #'(lambda () (interactive) (vb/regex-kill-buffers "magit"))
    [remap evil-jump-forward] #'magit-section-toggle
    [remap evil-delete-char] #'magit-discard
    [remap evil-paste-before] #'magit-push
    [remap evil-find-char-backward] #'magit-pull
    [remap evil-find-char] #'magit-fetch
    [remap evil-change-whole-line] #'magit-submodule
    [remap evil-shell-command] #'magit-git-command
    [remap evil-ret] #'magit-diff-visit-file
    [remap evil-substitute] #'magit-stage))

(setup (:if-feature evil)
  (evil-define-key 'normal magit-mode-map
    "gr" #'magit-refresh
    "gR" #'magit-refresh-all))

(setup (:pkg blamer))

(setup ediff
  (:option ediff-window-setup-function 'ediff-setup-windows-plain ;; Don't spawn new window for ediff
           ediff-split-window-function 'split-window-horizontally))

(provide 'init-projects)
;;; init-projects.el ends here
#+end_src
** Code style
[[https://github.com/lassik/emacs-format-all-the-code][Format-all-the-code]] lets you auto-format source code in many languages. It is very nice, you need only the formatters installed on your system.
[[https://github.com/glasserc/ethan-wspace][Ethan-wspace]] is a nice package to avoid useless/horrible extra whitespaces.
[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

The rest of =init-code-style.el= regards tab settings.

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-code-style.el")
;;; init-code-style.el --- Code style settings -*- lexical-binding: t -*-

;;; Commentary:

;; OCD, so I have to remove useless whitespace after save or on demand, and format all my code.
;; Plus, general tab settings, tree-sitter support, fancy stuff.

;;; Code:

(setup (:pkg format-all)
  (:hide-mode)
  (:hook-into prog-mode)
  (:global "<f1>" format-all-buffer))

(setup eldoc
  (:hide-mode)
  (global-eldoc-mode 1))

(setup (:pkg rainbow-mode)
  (:hook-into web-mode json-mode))

;; Tabs, indentation, and the TAB key
(setup indent
  (:option tab-always-indent 'complete
           tab-first-completion 'word-or-paren-or-punct
           tab-width 2
           indent-tabs-mode nil)) ; Use spaces!

(setup (:pkg rainbow-delimiters)
  (:hook-into prog-mode))

(setup (:pkg tree-sitter)
  (:autoload tree-sitter-mode tree-sitter-hl-mode)

  (:with-hook tree-sitter-after-on-hook
    (:hook tree-sitter-hl-mode))

  (global-tree-sitter-mode 1))

(setup (:pkg tree-sitter-langs)
  (:load-after treesitter))

(provide 'init-code-style)
;;; init-code-style.el ends here
#+end_src
** Syntax checking
Lately I've been trying =Flymake=, built-in into Emacs. [[https://www.flycheck.org/][Flycheck]] has many checkers though, so here we go with [[https://github.com/purcell/flymake-flycheck]["how to use Flycheck chekers in Flymake"]]
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-spell-and-check.el")
;;; init-spell-and-check.el --- Spell and syntax checking based on modes -*- lexical-binding: t -*-

;;; Commentary:

;; Flyspell as spell checker, while Flycheck as syntax checker for prog-mode.

;;; Code:

(setup flymake
  ;; Dumb `flymake' made me crash for this
  (add-to-list 'elisp-flymake-byte-compile-load-path load-path)

  (:option flymake-fringe-indicator-position 'left-fringe
           flymake-suppress-zero-counters t
           flymake-start-on-flymake-mode t
           flymake-no-changes-timeout 0.3
           flymake-start-on-save-buffer t
           flymake-proc-compilation-prevents-syntax-check t
           flymake-wrap-around nil)

  (:option flymake-mode-line-format
           '("" flymake-mode-line-exception flymake-mode-line-counters))

  (:option flymake-mode-line-counter-format
           '(" " flymake-mode-line-error-counter
             flymake-mode-line-warning-counter
             flymake-mode-line-note-counter ""))

  (:bind-into ctl-x-x-map
    "m" #'flymake-mode)

  (:bind "C-c ! s" #'flymake-start
         "C-c ! b" #'flymake-show-buffer-diagnostics ; Emacs28
         "C-c ! f" #'flymake-show-project-diagnostics ; Emacs28
         "C-c ! n" #'flymake-goto-next-error
         "C-c ! p" #'flymake-goto-prev-error)
  (:hook-into prog-mode text-mode))

;; From Purcell
(setup (:pkg flymake-flycheck)
  (:with-after flycheck
    (setq-default flycheck-disabled-checkers
                  (append (default-value 'flycheck-disabled-checkers)
                          '(emacs-lisp emacs-lisp-checkdoc emacs-lisp-package)))

    (:with-mode flymake-mode
      (:local-set flymake-diagnostic-functions
                  (append flymake-diagnostic-functions
                          (flymake-flycheck-all-chained-diagnostic-functions))))))

(setup flyspell
  (:with-mode text-mode
    (:hook flyspell-mode))

  (:with-mode prog-mode
    (:hook flyspell-prog-mode)))

(provide 'init-spell-and-check)
;;; init-spell-and-check.el ends here
#+end_src
** LSP
[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] support with multiples languages support for Emacs.
There are two ways to use LSP with Emacs: [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] and [[https://github.com/joaotavora/eglot][Eglot]] (built into Emacs 29). I prefer the latter for the following reason, given by the author of =Eglot=:
#+begin_quote
Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there's nothing to configure. It's a minimalist approach focused on user experience and performance.
#+end_quote
To avoid copy-pasting, here the [[https://github.com/joaotavora/eglot#historical-differences-to-lsp-modeel][full comparision]].

#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-lsp.el")
;;; init-lsp.el --- Language Server Protocol client -*- lexical-binding: t -*-

;;; Commentary:

;; Here the configuration for LSP-Mode.

;;; Code:

;;
;;; NOTE: These are taken from https://github.com/doomemacs/doomemacs/blob/master/modules/tools/lsp/config.el
(defvar vb/lsp--default-read-process-output-max nil)
(defvar vb/lsp--default-gcmh-high-cons-threshold nil)
(defvar vb/lsp--optimization-init-p nil)

(define-minor-mode vb/lsp-optimization-mode
  "Deploys universal GC and IPC optimizations for `lsp-mode' and `eglot'."
  :global t
  :init-value nil
  :group 'lsp
  (if (not vb/lsp-optimization-mode)
	    (setq-default read-process-output-max vb-lsp--default-read-process-output-max
		                gcmh-high-cons-threshold vb/lsp--default-gcmh-high-cons-threshold
		                vb-lsp--optimization-init-p nil)
    ;; Only apply these settings once!
    (unless vb/lsp--optimization-init-p
	    (setq vb/lsp--default-read-process-output-max (default-value 'read-process-output-max)
	          vb/lsp--default-gcmh-high-cons-threshold (default-value 'gcmh-high-cons-threshold))
	    (setq-default read-process-output-max (* 1024 1024))
	    ;; REVIEW LSP causes a lot of allocations, with or without the native JSON
	    ;;        library, so we up the GC threshold to stave off GC-induced
	    ;;        slowdowns/freezes. Doom uses `gcmh' to enforce its GC strategy,
	    ;;        so we modify its variables rather than `gc-cons-threshold'
	    ;;        directly.
	    (setq-default gcmh-high-cons-threshold (* 2 vb/lsp--default-gcmh-high-cons-threshold))
	    (gcmh-set-high-threshold)
	    (setq vb/lsp--optimization-init-p t))))

(defcustom vb-lsp-client 'eglot
  "Preferred lsp-client."
  :type 'symbol
  :group 'lsp)

;;; EGLOT

;; Eglot is built-in in Emacs 29+, so this condition doesn't consent the installation
;; if it is already present.
(setup eglot
	(unless (package-installed-p 'eglot)
	  (:pkg eglot))
	(:option eglot-autoshutdown t)

	;; List of modes and servers
	(:when-loaded
	  (add-to-list 'eglot-server-programs '((c++-mode c-mode)
						                              "clangd"
						                              "-j=8"
						                              "--log=error" "--malloc-trim"
						                              "--background-index"
						                              "--clang-tidy"
						                              "--cross-file-rename"
						                              "--completion-style=detailed"
						                              "--pch-storage=memory"
						                              "--header-insertion=never"
						                              "--header-insertion-decorators=0"))
	  (add-to-list 'eglot-server-programs `(nix-mode . ,(eglot-alternatives '(("nil")
										                                                        ("rnix-lsp")))))
	  (add-to-list 'eglot-server-programs '((go-mode) "gopls")))

	(:with-after (cape yasnippet)
		(:local-set completion-at-point-functions (list (cape-super-capf
								                                     #'eglot-completion-at-point
								                                     #'cape-yasnippet
								                                     #'cape-file))))
  ;; (:bind-into eglot-mode-map
  ;;   "gd" 'xref-find-definitions
  ;;   "gD" 'xref-find-definitions-other-window
  ;;   "g5" 'xref-find-definitions-other-frame

  ;;   "gr" 'xref-find-references
  ;;   "gR" 'eglot-rename
  ;;   "gn" 'flymake-goto-next-error
  ;;   "gp" 'flymake-goto-prev-error
  ;;   "K" 'eldoc-doc-buffer)

	;; Hooks
	(:with-mode (c-mode c++-mode go-mode nix-mode python-mode)
		(:hook eglot-ensure)))

(setup (:if-feature gcmh)
	(:with-hook (eglot-managed-mode-hook)
		(:hook vb/lsp-optimization-mode)))

(setup (:if-feature general)
  ;; Additional keymaps using <SPC> prefix
  (vb/leader-key
    "gd" '(xref-find-definitions :which-key "Goto definition")
    "gD" '(xref-find-definitions-other-window :which-key "Goto definition")
    "g5" '(xref-find-definitions-other-frame :which-key "Goto definition")
    "gr" '(xref-find-references :which-key "Find reference")
    "gn" '(flymake-goto-next-error :which-key "Goto next error")
    "gp" '(flymake-goto-prev-error :which-key "Goto prev error")
    "gR" '(eglot-rename :which-key "Rename variable/function")))
(provide 'init-lsp)
#+end_src
** Snippets
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-snippets.el")
;;; init-snippets.el --- Snippets -*- lexical-binding: t -*-

;;; Commentary:

;; Remember code snippet for common functions? Bleah.

;;; Code:

(setup (:pkg yasnippet)
  (:with-mode yas-minor-mode
    (:hide-mode)
    (:hook-into prog-mode))
  (:when-loaded
    (yas-reload-all)))

(setup (:pkg yasnippet-snippets)
  (:load-after yasnippet))

(setup (:pkg (cape-yasnippet :type git :host github :repo "elken/cape-yasnippet"))
    (:global "C-c p y" cape-yasnippet))

(provide 'init-snippets)
;;; init-snippets.el ends here
#+end_src
** Extra modes
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-extra-modes.el")
;;; init-extra-modes.el --- Extra modes -*- lexical-binding: t -*-

;;; Commentary:

;; This is not divided in multiple files, it's useless, I'm good this way :D.

;;; Code:

(setup (:pkg cmake-mode)
  (:file-match (rx (or "CmakeLists.txt" ".cmake") eos)))

(setup (:pkg nix-mode)
  (:file-match (rx ".nix" eos)))

(setup (:pkg go-mode)
  (:file-match (rx ".go" eos)))

(setup (:pkg markdown-mode)
  (:file-match (rx (or ".md" ".markdown" ".mdown") eos)))

(setup (:pkg yaml-mode)
  (:file-match (rx (or ".yml" ".yaml") eos)))

(setup (:pkg json-mode)
  (:file-match (rx ".json" eos)))

(setup (:pkg dockerfile-mode)
  (:file-match (rx ".dockerfile" eos)))

;; Organize and send HTTP requests from Emacs with verb
(setup (:pkg verb))

(provide 'init-extra-modes)
;;; init-extra-modes.el ends here
#+end_src
* Frontend for other uses
Emacs can be a frontend for almost everything.
** Mails
I've used =mu4e= (mu-for-emacs) for almost a year. It is an e-mail client for GNU Emacs version 24.4 or higher, built on top of the [[https://github.com/djcb/mu][mu]] e-mail search engine. =mu4e= is optimized for quickly processing large amounts of e-mail.
However, I've always struggled with it, and I recently tried [[https://notmuchmail.org/][notmuch]]. Oh boy, I wish I had done it sooner!
It is a very fast tag-based email indexer and system to use with multiple clients, Emacs, Neomutt, and so on.
#+begin_quote
"Not much mail" is what Notmuch thinks about your email collection. Even if you receive 12000 messages per month or have on the order of millions of messages that you've been saving for decades. Regardless, Notmuch will be able to quickly search all of it. It's just plain not much mail.
#+end_quote
#+begin_quote
"Not much mail" is also what you should have in your inbox at any time. Notmuch gives you what you need, (tags and fast search), so that you can keep your inbox tamed and focus on what really matters in your life, (which is surely not email).
#+end_quote
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-mail.el")
;;; init-mail.el --- Mail configuration -*- lexical-binding: t -*-

;;; Commentary:

;; `Notmuch' is a fast, tag-based email indexer to use with your favorite interface (e.g. Emacs :D).
;; I previously used `mu4e', I didn't really like it though.

;; This code is heavily based on Prot's code.
;; https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-notmuch.el
;; https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs-modules/prot-emacs-email.el

;;; Code:
(let*
    ((not-much-path
      (file-name-directory (directory-file-name (file-name-directory (executable-find "notmuch")))))
     (not-much-load-path (concat not-much-path "share/emacs/site-lisp/")))
  (add-to-list 'load-path not-much-load-path))

(defgroup vb/notmuch()
  "Extensions for notmuch."
  :group 'notmuch)

(defcustom vb/notmuch-delete-tag "deleted"
  "Tag that applies to mail marked for deletion."
  :type 'string
  :group 'vb/notmuch)

(defcustom vb/notmuch-mark-delete-tags
  `(,(format "+%s" vb/notmuch-delete-tag) "-inbox" "-unread")
  "List of tags to mark for deletion."
  :type '(repeat string)
  :group 'vb/notmuch)

(defcustom vb/notmuch-mark-archive-tags '( "-deleted" "-inbox" "-unread")
  "List of tags to mark for archive."
  :type '(repeat string)
  :group 'vb/notmuch)

(defcustom vb/notmuch-mark-flag-tags '("+flagged" "-unread")
  "List of tags to mark as important (flagged is a special tag)."
  :type '(repeat string)
  :group 'vb/notmuch)

(defcustom vb/notmuch-mark-spam-tags '("+spam" "-inbox" "-unread")
  "List of tags to mark as spam."
  :type '(repeat string)
  :group 'vb/notmuch)

;;;; Autoload of commands
(autoload 'notmuch-interactive-region "notmuch")
(autoload 'notmuch-tag-change-list "notmuch")
(autoload 'notmuch-search-next-thread "notmuch")
(autoload 'notmuch-search-tag "notmuch")

(defmacro vb/notmuch-search-tag-thread (name tags)
  "Produce NAME function parsing TAGS."
  (declare (indent defun))
  `(defun ,name (&optional untag beg end)
     ,(format
       "Mark with `%s' the currently selected thread.
Operate on each message in the currently selected thread.  With
optional BEG and END as points delimiting a region that
encompasses multiple threads, operate on all those messages
instead.
With optional prefix argument (\\[universal-argument]) as UNTAG,
reverse the application of the tags.
This function advances to the next thread when finished."
       tags)
     (interactive (cons current-prefix-arg (notmuch-interactive-region)))
     (when ,tags
       (notmuch-search-tag
	      (notmuch-tag-change-list ,tags untag) beg end))
     (when (eq beg end)
       (notmuch-search-next-thread))))

(vb/notmuch-search-tag-thread vb/notmuch-search-delete-thread vb/notmuch-mark-delete-tags)
(vb/notmuch-search-tag-thread vb/notmuch-search-flag-thread vb/notmuch-mark-flag-tags)
(vb/notmuch-search-tag-thread vb/notmuch-search-spam-thread vb/notmuch-mark-spam-tags)

(defmacro vb/notmuch-show-tag-message (name tags)
  "Produce NAME function parsing TAGS."
  (declare (indent defun))
  `(defun ,name (&optional untag)
     ,(format
       "Apply `%s' to message.
With optional prefix argument (\\[universal-argument]) as UNTAG,
reverse the application of the tags."
       tags)
     (interactive "P")
     (when ,tags
       (apply 'notmuch-show-tag-message
	            (notmuch-tag-change-list ,tags untag)))))

(vb/notmuch-show-tag-message vb/notmuch-show-delete-message vb/notmuch-mark-delete-tags)
(vb/notmuch-show-tag-message vb/notmuch-show-flag-message vb/notmuch-mark-flag-tags)
(vb/notmuch-show-tag-message vb/notmuch-show-spam-message vb/notmuch-mark-spam-tags)

(autoload 'notmuch-refresh-this-buffer "notmuch")
(autoload 'notmuch-refresh-all-buffers "notmuch")

(defun vb/notmuch-refresh-buffer (&optional arg)
  "Run `notmuch-refresh-this-buffer'.
With optional prefix ARG (\\[universal-argument]) call
`notmuch-refresh-all-buffers'."
  (interactive "P")
  (if arg
      (notmuch-refresh-all-buffers)
    (notmuch-refresh-this-buffer)))

;; Current client for mails
(setup notmuch
  (:autoload notmuch notmuch-mua-new-mail)
  ;; UI
  (:option notmuch-show-logo t
           notmuch-column-control 0.5
           notmuch-hello-auto-refresh t
           notmuch-hello-recent-searches-max 15
           notmuch-hello-thousands-separator "."
           notmuch-show-all-tags-list t
           notmuch-hello-insert-footer t
           notmuch-hello-sections
           '(notmuch-hello-insert-header
             notmuch-hello-insert-saved-searches
             notmuch-hello-insert-search
             notmuch-hello-insert-recent-searches
             notmuch-hello-insert-alltags))
  ;; Search
  (:option notmuch-search-oldest-first nil
           notmuch-show-empty-saved-searches t
           notmuch-search-result-format
           '(("date" . "%12s ")
             ("count" . "%-7s ")
             ("authors" . "%-20s ")
             ("subject" . "%80s ")
             ("tags" . "[%s]"))
           notmuch-tree-result-format
           '(("date" . "%12s  ")
             ("authors" . "%-20s")
             ((("tree" . "%s")
               ("subject" . "%s"))
              . " %-80s ")
             ("tags" . "[%s]"))
           notmuch-search-line-faces
           '(("unread" . notmuch-search-unread-face)
             ("flagged" . notmuch-search-flagged-face)))

  ;; Saved searches
  (:option notmuch-saved-searches
		       ;; Personal
		       `(( :name "📥 inbox (personal)"
		           :query "tag:inbox and tag:personal"
		           :sort-order newest-first
		           :key ,(kbd "p i"))
		         ( :name "📔 unread (personal)"
		           :query "tag:unread and tag:inbox and tag:personal"
		           :sort-order newest-first
		           :key ,(kbd "p u"))
		         ;; University
		         ( :name "📥 inbox (university)"
		           :query "tag:inbox and tag:university"
		           :sort-order newest-first
		           :key ,(kbd "u i"))
		         ( :name "📔 unread (university)"
		           :query "tag:unread and tag:inbox and tag:university"
		           :sort-order newest-first
		           :key ,(kbd "u u"))))

  ;; Tags
  (:option notmuch-archive-tags vb/notmuch-mark-archive-tags
		       notmuch-message-replied-tags '("+replied")
		       notmuch-message-forwarded-tags '("+forwarded")
		       notmuch-show-mark-read-tags '("-unread")
		       notmuch-draft-tags '("+draft")
		       notmuch-draft-folder "drafts"
		       notmuch-draft-save-plaintext 'ask)

  ;; Tag formats (with emojis)
  (:option notmuch-tag-formats
		       '(("unread" (propertize tag 'face 'notmuch-tag-unread))
		         ("flagged" (propertize tag 'face 'notmuch-tag-flagged) ;; Icon is enough
		          (concat "🚩")))

		       notmuch-tag-deleted-formats
		       '(("unread" (notmuch-apply-face bare-tag 'notmuch-tag-deleted)
		          (concat "🚫" tag))
		         (".*" (notmuch-apply-face tag 'notmuch-tag-deleted)
		          (concat "🚫" tag)))

		       notmuch-tag-added-formats
		       '((".*" (notmuch-apply-face tag 'notmuch-tag-added)
		          (concat "✏️" tag))))

  ;; Reading
  (:option notmuch-show-relative-dates t
		       notmuch-show-all-multipart/alternative-parts nil
		       notmuch-show-indent-messages-width 1
		       notmuch-show-indent-multipart t
		       notmuch-show-part-button-default-action 'notmuch-show-view-part
		       notmuch-show-text/html-blocked-images "." ; block everything
		       notmuch-wash-wrap-lines-length 120
		       notmuch-unthreaded-show-out nil
		       notmuch-message-headers '("To" "Cc" "Subject" "Date")
		       notmuch-message-headers-visible t)

  (:option notmuch-wash-citation-lines-prefix 3
		       notmuch-wash-citation-lines-suffix 3)

  ;; Composition
  (:option notmuch-mua-compose-in 'current-window
		       notmuch-mua-hidden-headers nil
		       notmuch-address-command 'internal
		       notmuch-always-prompt-for-sender t
		       notmuch-mua-cite-function 'message-cite-original
		       notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never
		       notmuch-mua-user-agent-function nil
		       notmuch-maildir-use-notmuch-insert t
		       notmuch-crypto-process-mime t
		       notmuch-crypto-get-keys-asynchronously t
		       notmuch-mua-attachment-regexp   ; see `notmuch-mua-send-hook'
		       (concat "\\b\\(attache\?ment\\|attached\\|attach\\|"
			             "pi[èe]ce\s+jointe?\\)\\b"))

  ;; Tagging keys
  (:option notmuch-tagging-keys
		       `((,(kbd "d") vb/notmuch-mark-delete-tags "⛔ Mark for deletion")
		         (,(kbd "a") vb/notmuch-mark-archive-tags "📫 Mark to archive")
		         (,(kbd "f") vb/notmuch-mark-flag-tags "🚩 Flag as important")
		         (,(kbd "s") vb/notmuch-mark-spam-tags "⚠️ Mark as spam")
		         (,(kbd "r") ("-unread") "✅ Mark as read")
		         (,(kbd "u") ("+unread") "📔 Mark as unread")))

  ;; Identities
  (:option notmuch-identies '("valentinobocchetti59@gmail.com" "vale.bocchetti@studenti.unina.it")
           notmuch-fcc-dirs '(("valentinobocchetti59@gmail.com" . "gmail/sent +personal +sent")
                              ("vale.bocchetti@studenti.unina.it" . "unina/sent +university +sent")))

  ;; Other cosmetic formatting
  (add-to-list 'notmuch-tag-formats '("encrypted" (concat tag "🔒")))
  (add-to-list 'notmuch-tag-formats '("attachment" (concat tag "📎")))

  (:with-hook notmuch-mua-send-hook
		(:hook notmuch-mua-attachment-check))

  (:global "C-c m" notmuch
		       "C-x m" notmuch-mua-new-mail)
  (:bind-into notmuch-search-mode-map
    ;; K
    [remap evil-lookup] #'notmuch-tag-jump
    ;; RET
    [remap evil-ret] #'notmuch-search-show-thread
    ;; /
    [remap evil-search-forward] #'notmuch-search-filter)

  (:bind-into notmuch-show-mode-map
    [remap evil-change-whole-line] #'notmuch-show-save-attachments
    ;; H
    [remap evil-window-top] #'notmuch-show-toggle-visibility-headers
    ;; *
    [remap evil-search-word-forward] #'notmuch-show-tag-all
    ;; RET
    [remap evil-ret] #'notmuch-show-toggle-message

    "C-+" #'notmuch-show-add-tag
    "C--" #'notmuch-show-remove-tag
    "C-j" 'notmuch-show-next-message
    "C-k" 'notmuch-show-previous-message
    "M-j" 'notmuch-show-next-thread-show
    "M-k" 'notmuch-show-previous-thread-show))

(setup (:if-feature evil)
  (evil-define-key 'normal notmuch-common-keymap
    "C" 'notmuch-mua-new-mail
    "cc" 'notmuch-mua-new-mail
    "q" 'notmuch-bury-or-kill-this-buffer
    "s" 'notmuch-search
    "J" 'notmuch-jump-search
    "gr" 'vb/notmuch-refresh-buffer))

(setup sendmail
  (:option send-mail-function 'sendmail-send-it
           mail-specify-envelope-from t
           message-sendmail-envelope-from 'header
           mail-envelope-from 'header))

(provide 'init-mail)
;;; init-mail.el ends here
#+end_src
** Reading
I don't like DocView because the rendering is given by images in tmp storage, zoom is "bad" (for me, of course), rendering can be slow, with especially PDFs big.
My choice is [[https://github.com/vedang/pdf-tools][pdf-tools]], that renders on demand pages, has good quality, and is very comfortable.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-reading.el")
;;; init-reading.el --- PDF reading customization, using pdf-tools -*- lexical-binding: t -*-

;;; Commentary:

;; Documents & rdss feeds

;;; Code:

(setup (:pkg pdf-tools)
  (:option display-buffer-alist '(("^\\*outline"
                                   display-buffer-in-side-window
                                   (side . left)
                                   (window-width . 0.20)
                                   (inhibit-switch-frame . t)))
           pdf-tools-installer-os "nixos")


  (:bind-into pdf-view-mode-map
    "C-+" #'pdf-view-enlarge
    "C--" #'pdf-view-shrink
    "C-j" #'pdf-view-next-page
    "C-k" #'pdf-view-previous-page
    [remap evil-open-below] #'pdf-outline
    [remap evil-window-top] #'pdf-view-fit-height-to-window
    [remap evil-record-macro] #'quit-window
    [remap evil-execute-last-recorded-macro] #'kill-this-buffer
    [remap evil-forward-section-begin] #'pdf-view-next-page-command
    [remap evil-backward-section-begin] #'pdf-view-previous-page-command)

  (:with-mode pdf-view-mode
    (:file-match "\\.[pP][dD][fF]\\'"))

  (pdf-tools-install :no-query))
(defun open-pdf ()
  "Open the corresponding pdf based on the current org file opened."
  (interactive)
  (if (or (eq (length buffer-file-name) 0) (eq (file-exists-p (concat (file-name-base (buffer-file-name)) ".pdf")) nil))
      (message "Please select a valid file")
    (call-process-shell-command (concat "zathura " (file-name-base (buffer-file-name)) ".pdf > /dev/null 2>&1 & disown"))))

(setup (:pkg saveplace-pdf-view)
  (:load-after pdf-tools))

(setup (:pkg elfeed)
  (:global "C-c e l" elfeed)
  (:option elfeed-feeds (quote
                         (;; GNU/Linux related
                          ("https://www.reddit.com/r/linux.rss" linux)
                          ("https://www.reddit.com/r/linuxmemes.rss" linux linux-memes)
                          ("https://www.linuxserver.io/blog.rss" linux linux-server)

			                    ;; Nixos related
			                    ("https://www.reddit.com/r/nixos.rss"         nixos)
			                    ("https://christine.website/blog.rss"         nixos Xe)

			                    ;; Arch related
			                    ("https://www.reddit.com/r/archlinux.rss" arch)

			                    ;; Programming languages related
			                    ("https://nullprogram.com/feed/"                programming nullprogram)
			                    ("https://www.reddit.com/r/golang.rss"          programming golang)
			                    ("https://bitfieldconsulting.com/golang?format=rss" programming golang)

			                    ("https://www.reddit.com/r/C_Programming.rss"   programming C)
			                    ("https://www.reddit.com/r/ProgrammerHumor.rss" programming ProgrammerHumor)

			                    ;; Emacs related
			                    ("https://www.reddit.com/r/emacs.rss"    emacs)
			                    ("https://www.reddit.com/r/orgmode.rss"  emacs orgmode)
			                    ("https://planet.emacslife.com/atom.xml" emacs emacslife)

			                    ;; Latex related
			                    ("https://www.reddit.com/r/LaTeX.rss" latex)

			                    ;; Mobile related
                          ("https://www.reddit.com/r/androiddev.rss" android android-dev)
			                    ("https://www.reddit.com/r/fdroid.rss"     android fdroid)
			                    ("https://www.reddit.com/r/FlutterDev.rss" android flutter)

			                    ;; Miscellaneous
			                    ("https://www.rousette.org.uk/archives/index.xml" geekoides)
			                    ("https://www.bytelab.codes/rss/" bytelab)))

           elfeed-search-date-format '("%d-%m-%Y" 10 :left)
           elfeed-db-directory (expand-file-name "elfeed/" .var) ;; "~/.config/emacs/elfeed"
	         elfeed-search-filter "@5-days-ago +unread")
  (:bind-into elfeed-search-mode-map
    [remap evil-ret] 'elfeed-search-show-entry
    [remap evil-goto-char] 'elfeed-search-browse-url
    ;; filter
    [remap evil-change-whole-line] #'elfeed-search-set-filter
    [remap evil-substitute] #'elfeed-search-live-filter
    [remap evil-change] #'elfeed-search-clear-filter
    [remap evil-record-macro] #'elfeed-search-quit-window)

  (:bind-into elfeed-show-mode-map
    [remap elfeed-search-browse-url]  #'elfeed-show-visit
    [remap evil-goto-char] 'elfeed-show-visit
    [remap evil-record-macro] #'elfeed-kill-buffer
    "C-j" 'elfeed-show-next
    "C-k" 'elfeed-show-prev))

(setup (:if-feature evil)
  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "+") 'elfeed-search-tag-all
    (kbd "-")'elfeed-search-untag-all
    (kbd "u") 'elfeed-search-untag-all-unread
    (kbd "U") 'elfeed-search-tag-all-unread

    (kbd "gr") 'elfeed-update))


(provide 'init-reading)
;;; init-reading.el ends here
#+end_src
** Terminal
:PROPERTIES:
:header-args: :var terminal=(let ((index (cond ((string= system-name "kronos") 0) ((string= system-name "atlas") 1)))) (format "%s > /dev/null 2>&1 & disown" (nth index (split-string "foot -a=default_term.alacritty" "\\."))))
:END:
Vterm is an actual terminal emulator and my preferred method for executing shell command in Emacs. The main downsides it has for me compared to eshell and shell currently:

- There are some things that need to be polished (e.g. it changes cursor shape which is confusing when using different cursors for evil: #342)
- Every character is sent to the terminal immediately, so evil line-editing is not yet possible (minor since Emacs line-editing keybindings are more efficient, and the current behavior works with autosuggestions; sending the line only on enter would break autosuggestions)
- It does not currently integrate with completing-read frontends for completion

It might be cool to eventually replace a dedicated terminal emulator with vterm. Scrollback search, navigation, and copying are definitely better in Emacs than in any terminal or multiplexer.

Thanks to this [[https://www.reddit.com/r/emacs/comments/u5rx6z/open_vterm_in_resized_horizontal_split/][thread]] vterm-toggle is no more necessary!

#+NAME: terminal-value
#+BEGIN_SRC elisp :exports none
;; Taken from https://emacs.stackexchange.com/questions/32077/how-to-programmatically-surround-a-string-with-escaped-double-quote
(prin1-to-string terminal)
#+END_SRC

#+begin_src text :tangle (concat (car (org-property-values "lisp_path")) "init-shell.el")  :noweb yes
;;; init-shell.el --- Emacs <3 Shell -*- lexical-binding: t -*-

;;; Commentary:

;; This file should contain `eshell', `vterm', and similar terminal emulators available for Emacs.
;;; Code:
(setup vterm
  (unless (vb/using-nix-p)
    (:pkg vterm))

  (:autoload vterm vterm-other-window)

  (:option vterm-buffer-name " <<Terminal>>"
           vterm-max-scrollback 5000
           vterm-kill-buffer-on-exit t)
  (:bind-into vterm-mode-map
    [remap evil-delete-backward-word] #'vterm--self-insert
    [remap evil-emacs-state] #'vterm--self-insert
    [remap evil-paste-last-insertion] #'vterm--self-insert
    [remap evil-complete-next] #'vterm--self-insert
    [remap evil-complete-previous] #'vterm--self-insert
    [remap evil-copy-from-below] #'vterm--self-insert
    [remap evil-insert-digraph] #'vterm--self-insert
    [remap evil-shift-left-line] #'vterm--self-insert)

  (defun alacritty()
    "Open the terminal on the current directory."
    (interactive)
    (call-process-shell-command <<terminal-value()>>))
  (add-to-list 'display-buffer-alist
               '("\xe795 <<Terminal>>" ;; Original regex: "\*vterm\*"
                 (display-buffer-in-side-window)
                 (window-height . 0.25)
                 (side . bottom)
                 (slot . 0)))

  (setup (:if-feature general)
    ;; Additional keymaps using <SPC> prefix
    (vb/leader-key "s" '(vterm :which-key "Vterm")))

  (setup (:if-feature evil)
    (evil-set-initial-state 'vterm-mode 'insert)
    (evil-define-key 'normal vterm-mode-map
        "u" 'vterm-undo
        "P" 'vterm-yank)))

(setup (:pkg multi-vterm)
  (:with-after vterm
    (:option multi-vterm-dedicated-window-height-percent 20)))

(provide 'init-shell)
;;; init-shell.el ends here
#+end_src
** Telegram
Beautiful client, maybe the best telegram client around. A PITA, sometimes, due to tdlib compatibility.
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-telega.el")
;;; init-telega.el --- Telegram on Emacs -*- lexical-binding: t -*-

;;; Commentary:

;; Here we go.  The idea of using Emacs for everything is (almost) real.
;; `telega' is a great client, maybe the best client around for Telegram.
;; Sometimes it has issues which depend on the version `tdlib' installed on your system, but what the hell: it's good!

;;; Code:
(setup telega
  (unless (vb/using-nix-p)
    (:pkg telega))

  (:autoload telega)
  (:option telega-directory (expand-file-name (concat user-emacs-directory "telega/"))
           ;; telega-directory (locate-user-emacs-file "telega/")
           telega-use-images t
           telega-emoji-font-family "Noto Color Emoji"
           telega-emoji-use-images nil 
           ;; telega-emoji-company-backend 'telega-company-emoji
           telega-completing-read-function completing-read-function
           telega-animation-play-inline 2
           telega-inserter-for-chat-button 'telega-ins--chat-full-2lines
           telega-chat-button-width 30
           switch-to-buffer-preserve-window-point t
           telega-chat--display-buffer-action '((display-buffer-reuse-window display-buffer-use-some-window))
           telega-root-fill-column (+ 40 telega-chat-button-width)
           telega-chat-input-markups '("markdown2" "org"))

  (put (get 'telega-chat 'button-category-symbol)
       :inserter 'telega-ins--chat-full-2lines)

  (:bind-into telega-root-mode-map
    "<tab>" telega-chat-button-toggle-view
    "TAB" telega-chat-button-toggle-view
    [remap evil-record-macro] #'bury-buffer
    [remap evil-execute-last-recorded-macro] #'telega-kill)

  (:bind-into telega-chat-mode-map
    [remap telega-msg-resend] 'telega-msg-forward-marked-or-at-point
    [remap evil-record-macro] #'bury-buffer
    [remap evil-ret] #'telega-chatbuf-newline-or-input-send)

  (:bind-into telega-image-mode-map
    [remap evil-record-macro] #'bury-buffer
    [remap evil-execute-last-recorded-macro] #'kill-this-buffer
    "C-+" #'image-increase-size
    "C--" #'image-decrease-size)

  (:when-loaded
    (:also-load telega-mnz)
    (:global "C-c t" telega-prefix-map))

  (:with-mode telega-chat-mode
    ;; (:hook archer-telega-chat-mode)
    ;; From Andrew Tropin <3
    (:local-set completion-at-point-functions (mapcar
                                               #'cape-company-to-capf
                                               (append (list 'telega-company-emoji
                                                             'telega-company-username
                                                             'telega-company-hashtag)
                                                       (when (telega-chat-bot-p telega-chatbuf--chat)
                                                         '(telega-company-botcmd)))))
    (:hook telega-mnz-mode)
    (:hook visual-fill-column-mode))

  (:with-hook telega-load-hook
    (:hook telega-notifications-mode)))

(setup (:if-feature general)
  (vb/leader-key
    "t" '(:ignore t :which-key "Telega")
    "t t" '(telega :which-key "Open Telega")
    "t c" '(telega-chat-with :which-key "Chat with")
    "t s" '(telega-view-search :which-key "Search for...")
    "t q" '(telega-kill :wich-key "Close Telega")))


(setup (:if-feature evil)
  (evil-define-key 'normal telega-root-mode-map
    "J" telega-root-fastnav-map))
(provide 'init-telega)
;;; init-telega.el ends here
#+end_src

*** Chat related
+ c ~telega-msg-copy-text~
+ l ~telega-msg-copy-link~
+ ^ ~telega-msg-pin-toggle~
+ M-g ^ ~telega-chatbuf-goto-pinned-message~
+ ~telega-msg-redisplay~
* Games
#+begin_src emacs-lisp :tangle (concat (car (org-property-values "lisp_path")) "init-games.el")
;;; init-games.el --- Mail configuration -*- lexical-binding: t -*-

;;; Commentary:

;; Emacs can play games too

;;; Code:
(setup tetris
  (:option gamegrid-glyph-height-mm 10
           gamegrid-user-score-file-directory (expand-file-name "games/" .var))

  (:bind-into tetris-mode-map
    "è" tetris-pause-game
    "R" tetris-start-game

    [remap evil-paste-after] #'tetris-pause-game
    [remap evil-forward-char] #'tetris-move-right
    [remap evil-backward-char] #'tetris-move-left
    [remap evil-previous-line] #'tetris-rotate-next
    [remap evil-lookup] #'tetris-rotate-prev
    [remap evil-next-line] #'tetris-move-down
    [remap evil-join] #'tetris-move-bottom
    [remap evil-record-macro] #'quit-window))

(provide 'init-games)
;;; init-mail.el ends here
#+end_src
* Useful things
** My experience
I started using Emacs in late 2021, at the beginning of the third year of university.
Why? I needed something to write notes in a fast way, but I didn't last long: writing notes during my lessons slowed me down, probably because slides given by professors were enough.
Anyway, discovering Emacs was a surprise, and at first it was terrible, because I didn't know where to start!
Too many things to learn, but the community is awesome, resources are good, documentation is almost perfect, and it's VERY fun. So, I gave a chance to myself to learn Emacs.
*** How I learned?
=C-h=, essentially, self-documentation is useful ;).
Also EmacsWiki, videos and blog posts, manual, and so on.
*** Good resources
My learning path has been discontinuous, but good enough to learn this beautiful piece of software from 1976 (1984, for GNU Emacs).
- [[https://systemcrafters.cc/][System Crafters]] :: helped me a lot with the series `Emacs from Scratch`, his channel introduced Emacs to me for the first time. My first configuration was almost a copy-paste of David's configuration...This slowed me down *a lot*.
- [[https://protesilaos.com/][Protesilaos Stavrou]] :: is a gold mine, he's a very clever, wonderful person. I appreciate his verbose explanations about any kind of magic trick he does with Emacs.
- [[https://www.youtube.com/user/mzamansky][Mike Zamansky]] :: has a series dedicated to Emacs, and helped me to figure out some obscure matters.
- [[https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng][Andrew Tropin]] :: helped me on both Emacs and Nix (now he's using Guix), the problem of reproducibility is fascinating, and this guy is really prepared.
- [[https://github.com/purcell/emacs.d][Steve Purcell]] :: has a dev-centered configuration, but everyone can take inspiration from its dotfiles.
- [[https://github.com/seagle0128][Vincent Zhang]] :: author of [[https://github.com/seagle0128/.emacs.d][Centaur]], really good work.
- [[https://github.com/doomemacs/doomemacs][Doom Emacs]] :: an opinionated distribution of Emacs, providing many modules and optimizations.
